[{"/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/index.js":"1","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/components/App/App.js":"2","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/services/saving.js":"3","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/services/display.js":"4","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/services/keyComms.js":"5","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/services/util.js":"6","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/services/edit.js":"7","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/components/StatusBar/StatusBar.js":"8","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/components/Frame/Frame.js":"9","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/components/Task/Task.js":"10","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/components/List/List.js":"11","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/components/TaskList/TaskList.js":"12","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/components/SignIn/SignIn.js":"13"},{"size":15021,"mtime":1645221880097,"results":"14","hashOfConfig":"15"},{"size":5952,"mtime":1645221262039,"results":"16","hashOfConfig":"15"},{"size":2371,"mtime":1645206236211,"results":"17","hashOfConfig":"15"},{"size":5622,"mtime":1645206239829,"results":"18","hashOfConfig":"15"},{"size":4557,"mtime":1645206236211,"results":"19","hashOfConfig":"15"},{"size":948,"mtime":1645206126669,"results":"20","hashOfConfig":"15"},{"size":8292,"mtime":1645206236211,"results":"21","hashOfConfig":"15"},{"size":16648,"mtime":1645206298520,"results":"22","hashOfConfig":"15"},{"size":5550,"mtime":1645205835016,"results":"23","hashOfConfig":"15"},{"size":30006,"mtime":1645205835014,"results":"24","hashOfConfig":"15"},{"size":7900,"mtime":1645205835014,"results":"25","hashOfConfig":"15"},{"size":1171,"mtime":1645205835033,"results":"26","hashOfConfig":"15"},{"size":2152,"mtime":1645227874651,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1euks6e",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},"/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/index.js",[],"/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/components/App/App.js",[],"/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/services/saving.js",["60"],"import $ from 'jquery';\nimport * as util from './util';\n\nexport function reset() {\n  var accept = window.confirm('Are you sure you want to reset all window.data?');\n  if (accept) {\n    window.data = window.resetData;\n    localStorage.setItem('data', JSON.stringify(window.resetData));\n    setTimeout(function () { window.location.reload() }, 200);\n  }\n}\n\nexport function restore() {\n  window.preventReturn = true;\n  const textarea = $('<textarea class=\"restore\"></textarea>');\n  $('#root').append(textarea);\n  textarea.on('keydown', ev => {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n      window.data = JSON.parse(textarea.val());\n      localStorage.setItem('data', JSON.stringify(window.data));\n      window.location.reload();\n    } else if (ev.key === 'Escape') {\n      textarea.remove();\n      setTimeout(() => window.preventReturn = false, 100);\n    }\n  })\n}\n\nexport function backup() {\n  alert('open console to copy window.data (file download option will be added soon)');\n  util.consoleLog(JSON.stringify(window.data));\n}\n\nexport function clean() {\n  function removeDeadline(list, id) {\n    for (let x of Object.keys(list)) {\n      // switch it out of things\n      let deadlineList = list[x];\n      if (deadlineList.includes(id)) {\n        deadlineList =\n          deadlineList.splice(deadlineList.findIndex(x => x === id), 1);\n      }\n    }\n  }\n  // clean out tasks which aren't in lists\n  for (let id of Object.keys(window.data.tasks).filter(x =>\n    !['river', 'bank'].includes(x))) {\n    let found = false;\n    for (let containerId of Object.keys(window.data.tasks)) {\n      if (window.data.tasks[containerId].subtasks.map(x =>\n        util.stripR(x)).includes(id)) {\n        found = true;\n        break;\n      }\n    }\n    if (found === false) {\n      delete window.data.tasks[id];\n      removeDeadline(window.data.settings.deadlines, id);\n      removeDeadline(window.data.settings.startdates, id);\n    }\n  }\n\n  // clean out empty dates in the river view\n  const dates = window.data.tasks['river'].subtasks;\n  let i = dates.length - 1;\n  const today = new Date().toDateString();\n\n  while(window.data.tasks[dates[i]].subtasks.length === 0) {\n    i --;\n    const now = window.data.tasks[dates[i]].title;\n    if (i == 0 || now === today) break;\n  }\n  if (i < dates.length - 1) {\n    window.data.tasks['river'].subtasks = dates.slice(0, i + 1);\n  }\n}","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/services/display.js",[],"/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/services/keyComms.js",[],"/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/services/util.js",[],"/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/services/edit.js",[],"/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/components/StatusBar/StatusBar.js",["61"],"import React from 'react';\nimport './StatusBar.css';\nimport timerSnd from '../../assets/snd/timer.mp3';\nimport startSnd from '../../assets/snd/start.mp3';\nimport * as display from '../../services/display';\nimport * as edit from '../../services/edit';\nimport * as util from '../../services/util';\nimport * as saving from '../../services/saving';\nimport $ from 'jquery';\n\nexport default class StatusBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { searchString: '', foundTasks: {} };\n  }\n  search(ev) {\n    if (this.state.searchString === '') {\n      this.searches = { ...window.data.tasks };\n    }\n    this.setState({ searchString: ev.target.value });\n    for (let x of Object.keys(this.searches)) {\n      if (!new RegExp(this.state.searchString, 'i').test(\n        this.searches[x].title) ||\n        this.searches[x].info.complete === 'complete') {\n        delete this.searches[x];\n      }\n    }\n    // id : {title, subtasks, info}\n    this.setState({ foundTasks: this.searches });\n  }\n  goToSearch(id) {\n    window.preventReturn = true;\n    window.preventSelect = true;\n    var idList = [id];\n    function buildParents(otherId) {\n      for (let x of Object.keys(window.data.tasks)) {\n        if (window.data.tasks[util.stripR(x)].subtasks.includes(otherId)) {\n          idList.splice(0, 0, x);\n          buildParents(x);\n          return;\n        }\n      }\n    }\n    buildParents(id);\n    const frame = window.app.current.state[idList[0]].current;\n    const listIndex = frame.state.subtasks.slice(frame.state.shownIndex)\n      .findIndex(x => x === idList[1]);\n    frame.changeIndex(frame.state.shownIndex + listIndex, true);\n    this.setState({ searchString: '', foundTasks: {} });\n    \n    setTimeout(() => {\n      const list = frame.frames[listIndex].current;\n      let foundTask = list;\n      let i = 2;\n      while (idList.length > i) {\n        // find in tasks starting at index 2 (if it's there)\n        let taskId = idList[i];\n        let taskIndex;\n        if (foundTask.subtasksCurrent &&\n          foundTask.subtasksCurrent.length > 0) {\n          taskIndex = foundTask.subtasksCurrent\n            .findIndex(x => x === taskId);\n        } else {\n          taskIndex = foundTask.state.subtasks\n            .findIndex(x => x === taskId);\n        }\n        foundTask = foundTask.taskList.current\n          .subtaskObjects[taskIndex].current;\n        i++;\n      }\n      window.preventSelect = false;\n      edit.selectTask(foundTask);\n      \n      // go through IDs and find the trace paths\n      setTimeout(() => {\n        window.preventReturn = false;\n      }, 100);\n    }, 100);\n  }\n  componentDidMount() {\n    setTimeout(display.goToToday, 200);\n  }\n  goToFirst() {\n    this.goToSearch($($(this.searchResults.current)\n      .children()[0]).attr('value'));\n  }\n  tutorial = () => {\n    this.setState({ tutorial: true });\n    const myFunc = (ev) => {\n      if (!$(ev.target).hasClass('tutorialShow')) {\n        this.setState({ tutorial: false });\n        $(window).off('click', myFunc);\n      }\n    }\n    setTimeout(() => {\n      $(window).on('click', myFunc)\n    }, 100);\n  }\n  render() {\n    this.search = this.search.bind(this);\n    this.goToSearch = this.goToSearch.bind(this);\n    this.goToFirst = this.goToFirst.bind(this);\n    this.searchResults = React.createRef();\n    this.searchBar = React.createRef();\n    this.options = React.createRef();\n    this.functions = React.createRef();\n    this.move = React.createRef();\n    this.upcoming = React.createRef();\n    let deadlineItems = Object.keys(this.props.deadlines).filter(\n      x => new Date(x).getTime() >= new Date().getTime()\n    )\n    deadlineItems = deadlineItems.map(x => (\n      this.props.deadlines[x].map(y => [x, y])\n    )).flat().filter(x => x.length > 0);\n    this.functionsDict = {\n      'newTask': edit.newTask,\n      'newSubtask': () => edit.newTask(\"task\"),\n      'cutTask': edit.cutTask,\n      'copyTask': edit.copyTask,\n      'copyTaskTrue': () => edit.copyTask(true),\n      'pasteTask': edit.pasteTask,\n      'pasteTaskTask': () => edit.pasteTask('task'),\n      'deleteTask': edit.deleteTask,\n      'moveTaskUp': () => edit.moveTask(-1),\n      'moveTaskDown': () => edit.moveTask(1),\n      'switchView': () => display.switchView(1),\n      'listEditMigrate': () => edit.listEdit('migrate'),\n      'listEditClear': () => edit.listEdit('clear'),\n      'displayTable': display.displayTable,\n      'focus': display.focus,\n      'zoom': display.zoom,\n      'undo': edit.undo,\n      'toggleComplete': () => window.app.current.toggleComplete(),\n      'backup': saving.backup,\n      'restore': saving.restore,\n      'reset': saving.reset,\n      'toggleSounds': display.toggleSounds,\n      'toggleMode': display.toggleMode,\n      'setThemeSpace': () => display.setTheme(\"space\"),\n      'setThemeSky': () => display.setTheme(\"sky\"),\n      'setThemeWater': () => display.setTheme(\"water\"),\n      'setThemeEarth': () => display.setTheme(\"earth\"),\n      'setThemeFire': () => display.setTheme(\"fire\"),\n      'indent': edit.indentTask,\n      'unindent': () => edit.indentTask(true),\n      'togglePast': () => {\n        if (window.app.current.state.river.current.state.shownIndex !== 0) {\n          window.app.current.state.river.current.setState({\n            shownIndex: 0\n          });\n        } else {\n          window.app.current.state.river.current.setState({\n            shownIndex: window.app.current.state.river.current.todayIndex()\n          });\n        }\n        display.goToToday();\n      } \n    }\n    return (\n      <>\n      <div className='statusBar'>\n        <span className='title'><span className='r'>River</span>\n          <span className='b'>Bank</span></span>\n        <div style={{\n          display: 'flex', flexDirection: 'column',\n          position: 'relative'\n        }}>\n          <input\n            ref={this.searchBar}\n            className='searchBar' onChange={(ev) => this.search(ev)}\n            value={this.state.searchString}\n            onKeyDown={(ev) => {\n              if (ev.key === 'Backspace') {\n                ev.preventDefault();\n                this.setState({ searchString: '', foundTasks: {} });\n              } else if (ev.key === 'Enter') {\n                ev.preventDefault();\n                if ($(this.searchResults.current).children().length > 0) {\n                  this.goToFirst();\n                }\n              }\n            }}\n            placeholder='search'></input>\n          {this.state.searchString.length > 0 &&\n            <select ref={this.searchResults}\n              style={{ width: '5em' }}\n              onChange={() => {\n                this.goToSearch(this.searchResults.current.value)\n              }}>\n              {Object.keys(this.state.foundTasks).map(x =>\n                <option key={x} value={x}>\n                  {this.state.foundTasks[x].title}\n                </option>)}\n            </select>\n          }\n        </div>\n        <Timer />\n        <div className='buttonBar nowrap'>\n          <select defaultValue='' ref={this.functions} style={{ width: '35px' }}\n            onChange={() => {\n              this.functionsDict[this.functions.current.value].call();\n              this.functions.current.value = '';\n            }}>\n            <option value=\"\" disabled hidden>edit</option>\n            <option value='newTask'>\n              new task (return)</option>\n            <option value='newSubtask'>\n              new subtask (shift-return)</option>\n            <option value='cutTask'>\n              cut (ctrl-x)</option>\n            <option value='copyTask'>\n              copy (ctrl-c)</option>\n            <option value='copyTaskTrue'>\n              mirror (ctrl-shift-C)</option>\n            <option value='pasteTask'>\n              paste (ctrl-v)</option>\n            <option value='pasteTaskTask'>\n              paste as subtask (ctrl-shift-V)</option>\n            <option value=\"deleteTask\">\n              delete (ctrl-delete)</option>\n          </select>\n          <select defaultValue='' ref={this.move} style={{ width: '45px' }}\n            onChange={() => {\n              this.functionsDict[this.move.current.value].call();\n              this.move.current.value = '';\n            }}>\n            <option value=\"\" disabled hidden>move</option>\n            <option value=\"moveTaskUp\">\n              move up (ctrl-w)</option>\n            <option value=\"moveTaskDown\">\n              move down (ctrl-s)</option>\n            <option value=\"indent\">\n              indent (ctrl-])</option>\n            <option value='unindent'>\n              unindent (ctrl-[)</option>\n            <option value=\"switchView\">\n              following week/lists (ctrl-d)</option>\n            <option value=\"switchView(-1)\">\n              previous week/lists (ctrl-a)</option>\n            <option value=\"listEditMigrate\">\n              migrate date</option>\n            <option value=\"listEditClear\">\n              clear list</option>\n            <option value=\"displayTable\">\n              display as table</option>\n            <option value=\"togglePast\">\n              show/hide past dates</option>\n          </select>\n          <select defaultValue='' ref={this.options} onChange={() => {\n            this.functionsDict[this.options.current.value].call();\n            this.options.current.value = '';\n          }}\n            style={{ width: '60px' }}>\n            <option value=\"\" disabled hidden>settings</option>\n            <option value='focus'>focus on list (ctrl-f)</option>\n            <option value='zoom'>focus on view (ctrl-shift-F)</option>\n            <option value='toggleComplete'>\n              show/hide complete (ctrl-h)</option>\n            <option value='undo'>undo (ctrl-z)</option>\n            <option value='backup'>backup</option>\n            <option value='restore'>restore</option>\n            <option value='reset'>reset</option>\n            <option value='toggleSounds'>toggle sounds</option>\n            <option value='toggleMode'>toggle day/night</option>\n            <option value='setThemeSpace'>theme: space</option>\n            <option value='setThemeSky'>theme: sky</option>\n            <option value='setThemeWater'>theme: water</option>\n            <option value='setThemeEarth'>theme: earth</option>\n            <option value='setThemeFire'>theme: fire</option>\n          </select>\n          <ListMenu />\n          <select defaultValue='' ref={this.upcoming} onChange={() => {\n            this.goToSearch(this.upcoming.current.value);\n            this.upcoming.current.value = '';\n          }} style={{width: '75px'}}>\n            <option value=\"\" disabled hidden>upcoming</option>\n            {deadlineItems.map(x => (\n              <option value={util.stripR(x[1])}>\n                {x[0].slice(0, x[0].length - 5)}: {\n                window.data.tasks[util.stripR(x[1])].title}\n              </option>\n            ))}\n          </select>\n        </div>\n        <span className='tutorialLink' onClick={this.tutorial}>help</span>\n      </div>\n      {this.state.tutorial && \n        <div className='tutorial tutorialShow'>\n          <iframe src='https://www.youtube.com/embed/AcfqM2exBu0'>\n          </iframe>\n        </div>\n      }\n      </>\n    )\n  }\n}\n\nclass ListMenu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { bankLists: props.bankLists, riverLists: props.riverLists };\n  }\n  goToList(type) {\n    if (type === 'river') {\n      display.searchDate(this.riverLister.current.value);\n    } else if (type === 'bank') {\n      var parent = window.app.current.state.bank.current;\n      var list = this.bankLister;\n      parent.changeIndex(Number(list.current.value), true);\n    }\n\n    if (type === 'river') {\n      this.riverLister.current.value = '';\n    } else if (type === 'bank') {\n      this.bankLister.current.value = '';\n    }\n  }\n  render() {\n    this.riverLister = React.createRef();\n    this.bankLister = React.createRef();\n    return (\n      <>\n        <select defaultValue='' ref={this.bankLister} onChange={() => this.goToList('bank')}\n          style={{ width: '35px' }}>\n          <option value=\"\" disabled hidden>lists</option>\n          {window.data.tasks['bank'].subtasks.filter(\n            x => window.data.tasks[x].title !== '--')\n            .map((x, index) =>\n              <option key={x} value={index}>{window.data.tasks[x].title}</option>)}\n        </select>\n        <select defaultValue='' ref={this.riverLister} onChange={() => {\n          if (this.riverLister.current.value === 'today') {\n            display.goToToday();\n            this.riverLister.current.value = '';\n          } else {\n            this.goToList('river')\n          }\n        }}\n          style={{ width: '45px' }}>\n          <option value=\"\" disabled hidden>dates</option>\n          <option value='today'>today (ctrl-t)</option>\n          {window.data.tasks['river'].subtasks.filter(x => new Date(\n            window.data.tasks[x].title).getTime() >=\n            new Date().getTime())\n            .map((x) =>\n              <option key={x} value={window.data.tasks[x].title}>\n                {window.data.tasks[x].title}</option>)}\n        </select>\n      </>\n    )\n  }\n}\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 0,\n      audio: new Audio(timerSnd),\n      start: new Audio(startSnd),\n      startTime: undefined,\n      ended: false,\n    };\n\n  }\n  startTimer(val) {\n    const endTime =\n      new Date(new Date().getTime() + val * 60 * 1000).getTime();\n    this.setState({ endTime: endTime, seconds: val * 60 });\n    display.playSound(this.state.start);\n    this.play();\n  }\n  play(stopwatch, backwards) {\n    Notification.requestPermission();\n    clearInterval(this.interval);\n    this.setState({ ended: false });\n    if (stopwatch === 'stopwatch') {\n      display.playSound(this.state.start);\n      this.interval = setInterval(() => {\n        this.setState({ seconds: this.state.seconds + 1 });\n      }, 1000);\n    } else {\n      this.interval = setInterval(() => {\n        this.setState({\n          seconds: Math.ceil((this.state.endTime -\n            new Date().getTime()) / 1000)\n        });\n        if (this.state.seconds <= 0 && this.state.ended === false) {\n          this.end();\n        }\n      }, 1000);\n    }\n  }\n  end() {\n    this.setState({ play: true, ended: true });\n    display.playSound(this.state.audio);\n    this.options.current.value = '';\n    new Notification('timer complete');\n  }\n  playPause() {\n    clearInterval(this.interval);\n    this.setState({ seconds: 0 });\n    this.options.current.value = '';\n  }\n  render() {\n    this.startTimer = this.startTimer.bind(this);\n    this.playPause = this.playPause.bind(this);\n    this.play = this.play.bind(this);\n    this.audioRef = React.createRef();\n    this.options = React.createRef();\n    var timeReadout;\n    if (this.state.seconds >= 0) {\n      timeReadout = Math.floor(this.state.seconds / 60) + ':' +\n        String(this.state.seconds -\n          (Math.floor(this.state.seconds / 60) * 60))\n          .padStart(2, '0')\n    } else {\n      if ((this.state.seconds / 60) === Math.floor(this.state.seconds / 60)\n        && this.state.seconds !== 0) {\n        // right on minute\n        timeReadout = '-' +\n          (-1 * (Math.floor(this.state.seconds / 60))) + ':00'\n      } else {\n        timeReadout = '-' +\n          (-1 * (Math.floor(this.state.seconds / 60) + 1)) + ':' +\n          String(60 - (this.state.seconds -\n            (Math.floor(this.state.seconds / 60) * 60)))\n            .padStart(2, '0')\n      }\n    }\n    return (\n      <>\n        <input className='timerBar' readOnly={true}\n          value={timeReadout}></input>\n        <select value='' ref={this.options} onChange={() => {\n          if (this.options.current.value === 'clear') {\n            this.playPause();\n            this.options.current.value = '';\n          } else if (this.options.current.value === 'stopwatch') {\n            this.setState({ seconds: 0 });\n            this.play('stopwatch');\n            this.options.current.value = '';\n          } else {\n            this.startTimer(this.options.current.value);\n            this.options.current.value = '';\n          }\n        }}\n          style={{ width: '45px' }}>\n          <option value=\"\" disabled hidden>timer</option>\n          <option value={'clear'}>--:--</option>\n          <option value={50}>50:00</option>\n          <option value={25}>25:00</option>\n          <option value={15}>15:00</option>\n          <option value={10}>10:00</option>\n          <option value={5}>5:00</option>\n          <option value={'stopwatch'} title='stopwatch'>&infin;</option>\n        </select>\n      </>\n    )\n  }\n}","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/components/Frame/Frame.js",["62"],"import React from 'react';\nimport './Frame.css';\nimport * as display from '../../services/display';\nimport * as util from '../../services/util';\nimport List from '../List/List';\nimport $ from 'jquery';\n\nexport default class Frame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subtasks: props.subtasks, info: props.info,\n      width: display.processWidth(props.info.focused),\n      zoomed: '',\n    };\n    if (props.id === 'river') {\n      this.state.repeats = window.data.settings.repeats;\n      this.state.shownIndex = this.todayIndex();\n    } else if (props.id === 'bank') {\n      this.state.shownIndex = 0;\n    }\n  }\n\n  // find index of today in shownLists\n  todayIndex = () => {\n    const today = new Date();\n    return this.state.subtasks.findIndex(x => {\n      const now = new Date(window.data.tasks[x].title);\n      return now.getDate() === today.getDate() &&\n        now.getMonth() === today.getMonth() &&\n        now.getFullYear() === today.getFullYear()\n    })\n  }\n\n  // create a new list\n  addList = (id) => {\n    // add a new list\n    var title;\n    if (this.props.id === 'river') {\n      const lastDate = new Date(\n        window.data.tasks[this.state.subtasks[this.state.subtasks.length - 1]].title);\n      lastDate.setDate(lastDate.getDate() + 1);\n      title = lastDate.toDateString();\n    } else {\n      title = '';\n    }\n\n    const subtasks = this.state.subtasks;\n    if (!id) id = String(new Date().getTime());\n    else id = String(id);\n    window.data.tasks[id] = {\n      title: title, subtasks: [], info: {}\n    }\n    subtasks.push(id);\n    this.setState({subtasks: subtasks});\n    setTimeout(() => {\n      this.frames[this.frames.length - 1].current.listInput.current.focus();\n    }, 100);\n  }\n\n  addLists = () => {\n    if (this.props.id === 'river') {\n      const id = new Date().getTime();\n      for (let i = 0; i < 7; i ++) {\n        this.addList(String(id + i));\n      }\n    } else {\n      this.addList();\n    }\n  }\n\n  changeIndex = async (val, set) => {\n    var newIndex;\n    if (set === true) {\n      newIndex = val;\n    } else {\n      newIndex = this.state.info.index + val;\n    }\n    if (!this.frame) return;\n\n    const finish = () => {\n      const children = $(this.frame.current).children();\n      if (children[newIndex]) {\n        children[newIndex].scrollIntoView();\n      }\n    }\n\n    this.setState({\n      info: {...this.state.info, index: newIndex}\n    }, finish);\n  }\n\n  updatePosition = () => {\n    if (this.state.focused === 'focused') return;\n    if (this.props.id !== 'river') return;\n    if (this.scrollPos === undefined) this.scrollPos = \n      Math.floor($(this.frameContainer.current).scrollLeft() / 300) * 300;\n    let position = $(this.frameContainer.current).scrollLeft();\n    if (position < 0) position = 0;\n    if (Math.abs(position - this.scrollPos) > 300) {\n      this.scrollPos = Math.floor(position / 300) * 300;\n      // this.setState({ index: this.state.shownIndex + \n      //   Math.floor(scrollPos / 300) });\n      this.setState({ info: \n        {\n          ...this.state.info, \n          index: this.state.shownIndex + Math.floor(this.scrollPos / 300)\n        }\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.updatePosition();\n  }\n\n  render() {\n    var resizeCheck = () => {\n      if (this.state.width !== display.processWidth(this.state.info.focused)) {\n        this.setState({ width: display.processWidth(this.state.info.focused) });\n      }\n    }\n    let endIndex = this.state.info.index + this.state.width;\n    this.frames = [];\n    window.addEventListener('resize', resizeCheck);\n    const shownLists = this.state.subtasks.slice(\n      this.state.shownIndex\n    );\n    this.frame = React.createRef();\n    this.frameContainer = React.createRef();\n    return (\n      <div className={`frameContainer \n        ${this.state.info.focused} ${this.state.zoomed} ${this.props.id}`}\n        onScroll={this.updatePosition} ref={this.frameContainer}>\n        {this.props.id === 'river' &&\n        this.state.info.focused !== 'focused' &&\n        <div className='monthYear'>\n          <span>{\n            window.data.tasks[this.state.subtasks[this.state.info.index]]\n              .title.slice(4, 8)}</span>\n          <span>{\n            window.data.tasks[this.state.subtasks[this.state.info.index]]\n              .title.slice(11)}</span>\n        </div>}\n        <div id={this.props.id}\n          className={'frame'} ref={this.frame}>\n          {shownLists.map(x => {\n            this.frames.push(React.createRef());\n            const task = window.data.tasks[x];\n            if (this.props.id === 'river') {\n              // render state correctly in original lists\n              return (\n                <List key={x} id={x} title={task.title}\n                  subtasks={task.subtasks} parent={this}\n                  deadlines={this.props.deadlines[task.title]}\n                  startdates={this.props.startdates[task.title]}\n                  repeats={this.state.repeats[util.dateFormat(task.title)\n                    .slice(0, 3)]}\n                  ref={this.frames[this.frames.length - 1]} />\n              )\n            } else {\n              return (\n                <List key={x} id={x} title={task.title}\n                  subtasks={task.subtasks} parent={this}\n                  ref={this.frames[this.frames.length - 1]} />\n              )\n            }\n          })}\n          <button className='changeButton' title='add list or date'\n            onClick={() => this.addLists()}>+</button>\n        </div>\n      </div>\n    );\n  }\n}","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/components/Task/Task.js",["63"],"import React from 'react';\nimport './Task.css';\nimport $ from 'jquery';\nimport * as display from '../../services/display';\nimport * as edit from '../../services/edit';\nimport * as util from '../../services/util';\nimport TaskList from '../TaskList/TaskList';\nimport List from '../List/List';\n\nexport default class Task extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      info: props.info, title: props.title,\n      subtasks: props.subtasks.filter(x =>\n        window.data.tasks[util.stripR(x)]), parent: props.parent,\n      id: props.id, displayOptions: 'hide', riverTask: false,\n      zoomed: '', minHeight: 1\n    };\n    // TODO\n    if (!this.state.info.startDate) this.state.info.startDate = ['--', '--'];\n    if (!this.state.info.endDate) this.state.info.endDate = ['--', '--'];\n    if (!this.state.info.notes) this.state.info.notes = '';\n    if (!this.state.info.type) {\n      if (props.parent instanceof List &&\n        util.getFrame(props.parent).props.id === 'river') {\n        this.state.info.type = 'event';\n      } else {\n        this.state.info.type = 'date';\n      }\n    };\n    if (!this.state.info.collapsed) this.state.info.collapsed = '';\n    if (!this.state.info.excludes) this.state.info.excludes = [];\n  }\n  displayOptions(ev, showHide) {\n    edit.save(this);\n    if (this.freeze === true) return;\n    if (window.selected !== this) {\n      edit.selectTask(this);\n    }\n    if (this.editBar.current) {\n      this.editBar.current.focus();\n    }\n    if ($(ev.target).hasClass('options') ||\n      $(ev.target).parent().hasClass('options')) {\n      return\n    }\n    if (showHide === 'hide' || this.state.displayOptions === 'show') {\n      this.setState({ displayOptions: 'hide' });\n      if (\n        this.props.parent instanceof List && \n        util.getFrame(this).props.id === 'river'\n      ) {\n        this.props.parent.forceUpdate();\n      }\n    } else if (showHide === 'show' || this.state.displayOptions === 'hide') {\n      this.setState({ displayOptions: 'show' });\n    }\n  }\n  changeTitle(ev) {\n    this.setState({ title: ev.target.value });\n    this.updateHeight();\n  }\n  updateHeight() {\n    if (this.resizable !== false) {\n      this.editBar.current.style.height = '0px';\n      this.editBar.current.style.height =\n        (this.editBar.current.scrollHeight) + \"px\";\n      this.resizable = false;\n    }\n    setTimeout(() => this.resizable = true, 100);\n  }\n  updateRiverDate(type, action) {\n    // remove from startdates/deadlines\n    var date = new Date();\n    var deadlineData;\n    if (type === 'start') {\n      if (this.state.info.startDate.includes('--')) return;\n      deadlineData = window.app.current.state.startdates;\n      date.setMonth(this.state.info.startDate[0] - 1);\n      date.setDate(this.state.info.startDate[1]);\n    } else if (type === 'end') {\n      if (this.state.info.endDate.includes('--')) return;\n      deadlineData = window.app.current.state.deadlines;\n      date.setMonth(this.state.info.endDate[0] - 1);\n      date.setDate(this.state.info.endDate[1]);\n    }\n    var dateString = date.toDateString();\n    if (action === 'add') {\n      if (!deadlineData[dateString]) {\n        deadlineData[dateString] = [this.props.id]\n      }\n      else { deadlineData[dateString].push(this.props.id) }\n    } else if (action === 'remove') {\n      if (!deadlineData[dateString]) return\n      else {\n        deadlineData[dateString].splice(deadlineData[dateString].findIndex(\n          x => x === this.props.id), 1)\n      };\n    }\n    // add to the things\n    if (type === 'start') {\n      window.app.current.setState({ startdates: { ...deadlineData } });\n      edit.saveSetting('startdates', deadlineData);\n    } else if (type === 'end') {\n      window.app.current.setState({ deadlines: { ...deadlineData } });\n      edit.saveSetting('deadlines', deadlineData);\n    }\n  }\n  toggleComplete(change) {\n    let status = this.state.info.complete\n    if (status === 'complete') { \n      status = '';\n      if (this.state.info.type === 'date') {\n        this.updateRiverDate('start', 'add');\n        this.updateRiverDate('end', 'add');\n      }\n    }\n    else {\n      status = 'complete';\n      if (this.state.info.type === 'date') {\n        this.updateRiverDate('start', 'remove');\n        this.updateRiverDate('end', 'remove');\n      }\n      display.playSound(window.app.current.state.popSnd);\n    }\n    // excludes lets it put it in complete\n    const repeats = window.app.current.state.river.current.state.repeats;\n    let repeating = false;\n    let parent = this.props.parent; /// find list it's in\n    while (!parent instanceof List) {\n      parent = parent.props.parent;\n    }\n    const excludes = this.state.info.excludes;\n    for (let x of ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']) {\n      if (repeats[x].includes('R' + util.stripR(this.props.id))) {\n        repeating = true;\n        if (!excludes.includes(parent.state.title)) {\n          excludes.push(parent.state.title);\n          break;\n        } else {\n          excludes.splice(excludes\n            .findIndex(x => x === parent.state.title), 1);\n          break;\n        }\n      }\n    }\n    if (repeating === true) {\n      this.setState({ info: { ...this.state.info, excludes: excludes } })\n    } else {\n      this.setState(prevState => ({\n        info: { ...prevState.info, complete: status }\n      }));\n    }\n    if (change !== false) {\n      this.displayOptions('hide');\n    }\n  }\n  toggleImportant(change) {\n    let status = this.state.info.important\n    if (status === 'important') { status = '' }\n    else { status = 'important' }\n    this.setState(prevState => ({\n      info: { ...prevState.info, important: status, maybe: '' }\n    }));\n    if (change !== false) {\n      this.displayOptions('hide');\n    }\n  }\n  toggleMaybe(change) {\n    let status = this.state.info.maybe\n    if (status === 'maybe') { status = '' }\n    else { status = 'maybe' }\n    this.setState(prevState => ({\n      info: { ...prevState.info, maybe: status, important: '' }\n    }));\n    if (change !== false) {\n      this.displayOptions('hide');\n    }\n  }\n  toggleCollapse() {\n    let status = this.state.info.collapsed\n    if (status === 'collapsed') { status = '' }\n    else { status = 'collapsed' }\n    this.setState(prevState => ({\n      info: { ...prevState.info, collapsed: status }\n    }), display.updateAllSizes);\n    this.displayOptions('hide');\n  }\n  hasRepeats = () => {\n    let repeating = false;\n    for (let repeat of Object.keys(window.data.settings.repeats)) {\n      if (window.data.settings.repeats[repeat].includes('R' +\n        util.stripR(this.props.id))) {\n        repeating = true;\n        break;\n      }\n    }\n    return repeating;\n  }\n  deleteThis(removeData) {\n    if (this.hasRepeats()) {\n      const permission = window.confirm(\n        'This will delete all repeats.\\n(Complete task to hide only this one)');\n      if (!permission) { return; }\n    }\n    // TODO: remove deadline, repeat & startdate \n    // [[don't use global variable]]\n    let parent = this.props.parent;\n    while (parent.props.parent) {\n      parent = parent.props.parent;\n    }\n    const subtasks = this.state.parent.state.subtasks;\n    const currentTask = subtasks.findIndex(x => x === this.props.id);\n    subtasks.splice(currentTask, 1);\n    window.selected = this.state.parent;\n    window.preventSelect = true;\n    this.state.parent.setState({ subtasks: subtasks });\n    if (removeData !== false) {\n      this.updateRiverDate('start', 'remove');\n      this.updateRiverDate('end', 'remove');\n      this.toggleRepeat('all', true);\n      delete window.data.tasks[util.stripR(this.props.id)];\n    }\n    setTimeout(() => {\n      window.undoData = localStorage.getItem('data');\n      window.preventSelect = false\n      edit.save(this.props.parent, 'list');\n    }, 200);\n  }\n  componentDidMount() {\n    this.editBar.current.focus();\n    setTimeout(\n      () => {\n        if (this.editBar.current) this.updateHeight();\n      }, 50\n    )\n    edit.selectTask(this);\n    this.resizable = true;\n  }\n  dateRender = (type) => {\n    var info;\n    if (type === 'start') {\n      info = this.state.info.startDate.concat();\n    } else if (type === 'end') {\n      info = this.state.info.endDate.concat();\n    }\n    if (this.state.info.type === 'event') {\n      if (type === 'start') {\n        let end;\n        if (info[0] >= 12) end = 'p';\n        else end = 'a';\n        if (info[0] > 12) { info[0] -= 12 }\n        return info[0] + ':' + String(info[1]).padStart(2, 0) + end;\n      } else if (type === 'end') {\n        let string = '';\n        if (info[0] !== 0) string += info[0] + 'h';\n        if (info[1] !== 0) string += info[1] + 'm';\n        return string;\n      }\n    } else if (this.state.info.type === 'date') {\n      return info[0] + '-' + info[1];\n    }\n  }\n  toggleRepeat = (dayInput, del) => {\n    var days;\n    if (dayInput === 'all') {\n      days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n    } else {\n      days = [dayInput];\n    }\n    let repeatId;\n    if (this.props.id.charAt(0) === 'R') {\n      repeatId = this.props.id;\n    } else {\n      repeatId = 'R' + this.props.id;\n    }\n    const repeats = { ...window.app.current.state.river.current.state.repeats };\n    for (let day of days) {\n      if (repeats[day].includes(repeatId) || del === true) {\n        if (repeats[day].includes(repeatId)) {\n          repeats[day].splice(repeats[day]\n            .findIndex(x => x === repeatId), 1);\n        }\n      } else {\n        repeats[day].push(repeatId);\n      }\n    }\n    window.app.current.state.river.current.setState({\n      repeats: repeats\n    });\n    edit.saveSetting('repeats', repeats);\n  }\n  timeDrag = (ev, unit, type) => {\n    var mouseup = () => {\n      window.removeEventListener('mousemove', changeTime);\n      window.app.current.setState({ disableSelect: '' });\n      if (unit === 'e' || this.state.info.type === 'event') {\n        this.displayOptions('hide');\n      } else if (unit === 's') {\n        this.setState({ displayOptions: 'show' });\n      } \n      this.freeze = true;\n      setTimeout(() => this.freeze = false, 200);\n      window.removeEventListener('mouseup', mouseup);\n      this.props.parent.forceUpdate();\n    }\n    window.addEventListener('mouseup', mouseup);\n    var change = 10;\n    var pageY = ev.screenY;\n    var updateTime = (ev2, value, unit) => {\n      let val;\n      let date;\n      let infoOrig;\n      let orig2;\n      if (this.state.info.type === 'event') {\n        if (type === 'start') {\n          infoOrig = this.state.info.startDate[1];\n          orig2 = this.state.info.startDate[0];\n        } else if (type === 'end') {\n          infoOrig = this.state.info.endDate[1];\n          orig2 = this.state.info.endDate[0];\n        }\n        if (infoOrig === '--') {\n          infoOrig = 0;\n        }\n        if (orig2 === '--' && type === 'end') {\n          orig2 = 0;\n        } else if (orig2 === '--' && type === 'start') {\n          orig2 = new Date().getHours();\n        }\n        let change;\n        if (ev2.shiftKey) {\n          change = value * 5;\n        } else {\n          change = value * 30;\n        }\n        val = infoOrig + change;\n        if (val >= 60) {\n          val = 0;\n          orig2 += 1;\n        } else if (val < 0) {\n          val = 60 + change;\n          orig2 -= 1;\n        }\n        if (type === 'end') {\n          if (orig2 >= 24 || orig2 < 0) {\n            val = '--';\n            orig2 = '--';\n            window.removeEventListener('mousemove', changeTime);\n          }\n        } else if (type === 'start') {\n          if (orig2 == 3) {\n            val = '--';\n            orig2 = '--';\n            window.removeEventListener('mousemove', changeTime);\n          }\n        }\n        if (type === 'start') {\n          this.setState({\n            info: {\n              ...this.state.info,\n              startDate: [orig2, val]\n            }\n          });\n        } else if (type === 'end') {\n          this.setState({\n            info: {\n              ...this.state.info,\n              endDate: [orig2, val]\n            }\n          });\n        }\n      } else {\n        // dates\n        this.updateRiverDate(type, 'remove');\n        if (unit === 's') {\n          if (type === 'start') {\n            infoOrig = this.state.info.startDate[0];\n            orig2 = this.state.info.startDate[1];\n          } else if (type === 'end') {\n            infoOrig = this.state.info.endDate[0];\n            orig2 = this.state.info.endDate[1];\n          }\n          if (infoOrig === '--' || Number.isNaN(infoOrig)) {\n            infoOrig = new Date().getMonth() + 1;\n          }\n          if (orig2 === '--' || Number.isNaN(orig2)) {\n            orig2 = 1;\n          }\n          val = infoOrig + value;\n          if (val === new Date().getMonth() && value < 0) {\n            val = '--';\n            orig2 = '--';\n          } else {\n            date = new Date();\n            date.setMonth(val - 1);\n            val = date.getMonth() + 1;\n          }\n          if (type === 'start') {\n            this.setState({\n              info: {\n                ...this.state.info,\n                startDate: [val, orig2]\n              }\n            });\n          } else if (type === 'end') {\n            this.setState({\n              info: {\n                ...this.state.info,\n                endDate: [val, orig2]\n              }\n            });\n          }\n        } else if (unit === 'e') {\n          if (type === 'start') {\n            infoOrig = this.state.info.startDate[1];\n            orig2 = this.state.info.startDate[0];\n          } else if (type === 'end') {\n            infoOrig = this.state.info.endDate[1];\n            orig2 = this.state.info.endDate[0];\n          }\n          if (infoOrig === '--' || Number.isNaN(infoOrig)) {\n            infoOrig = new Date().getDate();\n          }\n          if (orig2 === '--' || Number.isNaN(orig2)) {\n            orig2 = new Date().getMonth() + 1;\n          }\n          val = infoOrig + value;\n          date = new Date();\n          date.setMonth(orig2 - 1);\n          date.setDate(val);\n          date.setHours(0); date.setSeconds(0); date.setMilliseconds(0);\n          const today = new Date();\n          today.setDate(today.getDate() - 1);\n          today.setHours(0); today.setSeconds(0); today.setMilliseconds(0);\n          if (date.getTime() === today.getTime() && value < 0) {\n            if (type === 'start') {\n              this.setState({\n                info: {\n                  ...this.state.info,\n                  startDate: ['--', '--']\n                }\n              });\n            } else if (type === 'end') {\n              this.setState({\n                info: {\n                  ...this.state.info,\n                  endDate: ['--', '--']\n                }\n              });\n            }\n            return;\n          }\n          if (type === 'start') {\n            this.setState({\n              info: {\n                ...this.state.info,\n                startDate: [date.getMonth() + 1, date.getDate()]\n              }\n            });\n          } else if (type === 'end') {\n            this.setState({\n              info: {\n                ...this.state.info,\n                endDate: [date.getMonth() + 1, date.getDate()]\n              }\n            });\n          }\n        }\n        if (type === 'start' && !this.state.info.startDate.includes('--')) {\n          this.updateRiverDate(type, 'add');\n        } else if (type === 'end' && !this.state.info.endDate.includes('--')) {\n          this.updateRiverDate(type, 'add');\n        }\n      }\n    }\n    var changeTime = (ev) => {\n      var changeTime = false;\n      if (ev.screenY < pageY - change) {\n        pageY -= change;\n        changeTime = -1;\n      } else if (ev.screenY > pageY + change) {\n        pageY += change;\n        changeTime = 1;\n      }\n      if (changeTime !== false) {\n        updateTime(ev, changeTime, unit);\n      }\n    }\n    window.app.current.setState({ disableSelect: 'disable-select' });\n    window.addEventListener('mousemove', changeTime);\n  }\n  isComplete = () => {\n    let completed = this.state.info.complete;\n    let parent = this.props.parent;\n    // hacking completed for repeats\n    while (!parent instanceof List) {\n      parent = parent.props.parent;\n    }\n    if (this.state.info.excludes.includes(parent.state.title)) {\n      completed = 'complete';\n    }\n    return completed;\n  }\n  dropTask = (ev, type) => {\n    if (window.draggedTask.props.id === this.props.id) return;\n    edit.selectTask(window.draggedTask);\n    const listParent = window.selected.props.parent;\n    edit.cutTask();\n    edit.save(listParent, 'list');\n    window.preventSelect = false;\n    setTimeout(() => {\n      edit.selectTask(this);\n      if (type === 'subtask') {\n        edit.pasteTask('task');\n      } else if (type === 'task') {\n        edit.pasteTask();\n      }\n    }, 100);\n    this.setState({\n      taskDrop: false,\n      subtaskDrop: false,\n    })\n    ev.stopPropagation();\n  }\n  render() {\n    // fuck react\n    this.displayOptions = this.displayOptions.bind(this);\n    this.toggleComplete = this.toggleComplete.bind(this);\n    this.toggleImportant = this.toggleImportant.bind(this);\n    this.toggleMaybe = this.toggleMaybe.bind(this);\n    this.deleteThis = this.deleteThis.bind(this);\n    this.updateHeight = this.updateHeight.bind(this);\n    this.taskList = React.createRef();\n    this.optionsButton = React.createRef();\n    this.editBar = React.createRef();\n    this.infoInput = React.createRef();\n    this.infoArea = React.createRef();\n    const headingClass = this.state.subtasks.length > 0 ?\n      'heading' : '';\n    if (this.editBar.current) {\n      this.editBar.current.style.height = '0px';\n      this.editBar.current.style.height =\n        (this.editBar.current.scrollHeight) + \"px\";\n    }\n    let parent = this;\n    let id = [];\n    while (parent) {\n      id.push(parent.props.id);\n      parent = parent.props.parent;\n    }\n    id = id.reverse().join('-');\n    const hasTimes = this.state.info.type === 'event' &&\n      !this.state.info.startDate.includes('--');\n    let repeatsOn = {};\n    for (let day of ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']) {\n      if (window.data.settings.repeats[day].map(x => util.stripR(x)).includes(\n        util.stripR(this.props.id))) {\n        repeatsOn[day] = 'repeatOn';\n      } else {\n        repeatsOn[day] = '';\n      }\n    }\n    let completed = this.isComplete();\n    const amPmFormat = (hours) => {\n      if (hours === '--') return hours;\n      if (hours > 12) return hours - 12;\n      else return hours;\n    }\n    let startExtra;\n    let endExtra;\n    if (this.state.info.type === 'event') {\n      // am/pm\n      if (!this.state.info.startDate.includes('--')) {\n        if (this.state.info.startDate[0] >= 12) startExtra = 'p';\n        else startExtra = 'a';\n      }\n    }\n    else {\n      // date\n      const getWeekday = (list) => {\n        const weekdaysDict = {\n          1: 'M', 2: 'T', 3: 'W', 4: 'R', 5: 'F', 6: 'S', 0: 'U'\n        };\n        const date = new Date();\n        date.setMonth(list[[0]] - 1);\n        date.setDate(list[1]);\n        return weekdaysDict[date.getDay()];\n      }\n      if (!this.state.info.startDate.includes('--')) {\n        startExtra = getWeekday(this.state.info.startDate);\n      }\n      if (!this.state.info.endDate.includes('--')) {\n        endExtra = getWeekday(this.state.info.endDate);\n      }\n    } \n    const openDrag = (ev) => {\n      $(container.current).attr('draggable', 'true');\n    }\n    const closeDrag = (ev) => {\n      $(container.current).attr('draggable', 'false');\n    }\n    const startDrag = (ev) => {\n      // enabling drag & drop: only select target with matching title\n      // const dragId = $(ev.target).attr('dragid');\n      // if (this.props.id === dragId) {\n      // }\n      // only drag it if it's possible to be dragged\n      console.log('startDrag');\n      window.draggedTask = this;\n      ev.stopPropagation();\n    }\n    const dragOver = (ev) => {\n      ev.preventDefault();\n      ev.dataTransfer.dropEffect = 'all';\n    }\n    const container = React.createRef();\n    return (\n      <>\n      <li className={'task ' + this.state.info.important +\n        ' ' + completed +\n        ' ' + this.state.info.maybe +\n        ' ' + headingClass +\n        ' ' + this.state.info.type +\n        ' ' + this.state.info.collapsed +\n        ' ' + this.state.zoomed}\n        onClick={() => { edit.selectTask(this) }} \n        onContextMenu={() => edit.selectTask(this) }\n        style={{minHeight: this.state.minHeight * 1.15 * 30}}\n        onDragOver={dragOver}\n      >\n        <textarea className='infoArea' \n        ref={this.infoArea}\n        onKeyDown={(ev) => {\n          if (ev.key === 'Escape') {\n            $(this.infoArea.current).hide();\n            setTimeout(() => window.preventReturn = false, 100);\n          }\n        }}\n        onChange={() => {\n          this.setState({\n            info: {\n              ...this.state.info,\n              notes: this.infoArea.current.value\n            }\n          })\n        }}\n        value={this.state.info.notes}\n        ></textarea>\n        <div className='taskContent' ref={container}\n          onDragStart={startDrag}>\n          <div className={'options ' + this.state.displayOptions}>\n            <div className='buttonBar' style={{\n              width: '100%',\n              justifyContent: 'space-around',\n              flexWrap: 'nowrap',\n            }}>\n              <div className='buttonBar'>\n                <button\n                  title='toggle complete'\n                  className={'button ' + this.state.info.complete}\n                  onClick={this.toggleComplete}>\n                  √</button>\n                <button\n                  title='toggle important'\n                  className={'button ' + this.state.info.important}\n                  onClick={this.toggleImportant}>\n                  !</button>\n                <button\n                  title='toggle maybe'\n                  className={'button ' + this.state.info.maybe}\n                  onClick={this.toggleMaybe}>\n                  ?</button>\n                <button\n                  title='toggle fold'\n                  className={'button'}\n                  onClick={() => this.toggleCollapse()}>\n                  {'[]'}</button>\n              </div>\n              <div className='buttonBar'>\n                <button className={'button ' + repeatsOn['Mon']}\n                  onClick={() => { this.toggleRepeat('Mon'); }}>M</button>\n                <button className={'button ' + repeatsOn['Tue']}\n                  onClick={() => {\n                    this.toggleRepeat('Tue');\n                  }}>T</button>\n                <button className={'button ' + repeatsOn['Wed']}\n                  onClick={() => {\n                    this.toggleRepeat('Wed');\n                  }}>W</button>\n                <button className={'button ' + repeatsOn['Thu']}\n                  onClick={() => {\n                    this.toggleRepeat('Thu');\n                  }}>R</button>\n                <button className={'button ' + repeatsOn['Fri']}\n                  onClick={() => {\n                    this.toggleRepeat('Fri');\n                  }}>F</button>\n                <button className={'button ' + repeatsOn['Sat']}\n                  onClick={() => {\n                    this.toggleRepeat('Sat');\n                  }}>S</button>\n                <button className={'button ' + repeatsOn['Sun']}\n                  onClick={() => {\n                    this.toggleRepeat('Sun');\n                  }}>U</button>\n              </div>\n            </div>\n              <div className='timeDiv buttonBar' style={{\n                flexWrap: 'nowrap',\n              }}>\n                <button className='button timeSwitch'\n                  onClick={() => {\n                    var changeValue = this.state.info.type === 'event' ?\n                      'date' : 'event';\n                    this.setState({\n                      info: {\n                        ...this.state.info,\n                        type: changeValue,\n                        startDate: ['--', '--'],\n                        endDate: ['--', '--'],\n                      }\n                    })\n                  }}>\n                  {this.state.info.type}\n                </button>\n                <span className='startSpan start'>\n                  <span className='s' onMouseDown={(ev) => {\n                    this.timeDrag(ev, 's', 'start');\n                  }}>{\n                    this.state.info.type === 'event' ?\n                      amPmFormat(this.state.info.startDate[0]) :\n                      this.state.info.startDate[0]\n                  }</span>\n                  <span className='m'>{\n                    this.state.info.type === 'event' ? ':' : '/'\n                  }</span>\n                  <span \n                    className='e' \n                    onMouseDown={(ev) => {\n                      this.timeDrag(ev, 'e', 'start');\n                    }}\n                  >\n                    {this.state.info.type === 'event' ?\n                      String(this.state.info.startDate[1]).padStart(2, 0) :\n                      this.state.info.startDate[1]\n                    }\n                  </span>\n                  {startExtra && \n                  <span className='startSpan extraInfo'>\n                    {startExtra}\n                  </span>}\n                </span>\n                <span className='startSpan end'>\n                  <span className='s' onMouseDown={(ev) => {\n                    this.timeDrag(ev, 's', 'end');\n                  }}>{this.state.info.endDate[0]}</span>\n                  <span className='m'>{\n                    this.state.info.type === 'event' ? 'h' : '/'\n                  }</span>\n                  <span className='e' onMouseDown={(ev) => {\n                    this.timeDrag(ev, 'e', 'end');\n                  }}>{this.state.info.endDate[1]}</span>\n                  <span>{this.state.info.type === 'event' ?\n                    'm' : ''}</span>\n                  {endExtra && \n                  <span className='startSpan extraInfo'>\n                    {endExtra}\n                  </span>}\n                </span>\n                <input ref={this.infoInput} className='infoSpan' placeholder='notes'\n                  style={{ marginLeft: '5px' }}\n                  value={this.state.info.notes}\n                  onChange={() => {\n                    this.setState({\n                      info: {\n                        ...this.state.info,\n                        notes: this.infoInput.current.value\n                      }\n                    })\n                  }}></input>\n                <button className='button' onClick={() => {\n                  $(this.infoArea.current).show();\n                  window.preventReturn = true;\n                }} title='expand notes to paragraph'>+</button>\n              </div>\n          </div>\n          {!hasTimes ? \n            <span className='info'\n              onClick={(ev) => this.displayOptions(ev)}\n              ref={this.optionsButton}\n              onMouseDown={openDrag}\n              onMouseUp={closeDrag}>\n            </span> :\n            <span className='startDate'\n              onClick={(ev) => this.displayOptions(ev)}\n              ref={this.optionsButton}\n              onMouseDown={(ev) => {\n                this.timeDrag(ev, 's', 'start')\n              }}>\n              {this.dateRender('start')}\n            </span>}\n          <textarea className='editBar' value={this.state.title}\n            onChange={(ev) => this.changeTitle(ev)} ref={this.editBar}\n            spellCheck='false' onClick={(ev) => this.displayOptions(ev, 'hide')}></textarea>\n          {this.state.info.notes.length === 0 &&\n            <div style={{\n              display: 'flex', flexDirection: 'column',\n              marginRight: '5px'\n            }}>\n              {!hasTimes &&\n                !this.state.info.startDate.includes('--') &&\n                <span className='startDate'>\n                  {this.dateRender('start')}\n                </span>}\n              {!this.state.info.endDate.includes('--') &&\n                <span className='endDate'>\n                  {this.dateRender('end')}\n                </span>}\n            </div>\n          }\n        </div>\n        {this.state.info.notes.length > 0 &&\n        <div className='taskInfo'>\n          {this.state.info.notes.length > 0 &&\n            <span className='notesSpan'>\n              {this.state.info.notes.length > 50 ?\n                this.state.info.notes.slice(0, 50) + '...' :\n                this.state.info.notes}\n            </span>}\n          {!hasTimes &&\n            !this.state.info.startDate.includes('--') &&\n            <span className='startDate'>\n              {this.dateRender('start')}\n            </span>}\n          {!this.state.info.endDate.includes('--') &&\n            <span className='endDate'>\n              {this.dateRender('end')}\n            </span>}\n        </div>}\n        <div \n          className={`dropArea ${this.state.subtaskDrop ? 'droppable' : ''}`}\n          onDragEnter={() => {\n            console.log(window.draggedTask.props.id);\n            if (window.draggedTask.props.id === this.props.id) return;\n            this.setState({subtaskDrop: true})\n          }}\n          onDragLeave={() => this.setState({subtaskDrop: false})}\n          onDrop={(ev) => this.dropTask(ev, 'subtask')}\n        ></div>\n        <TaskList \n          ref={this.taskList} \n          subtasks={this.state.subtasks}\n          parent={this} \n        />\n      </li>\n      <div \n        className={`dropArea ${this.state.taskDrop ? 'droppable' : ''}\n          ${completed}`}\n        onDragEnter={() => {\n          console.log(window.draggedTask.props.id);\n          if (window.draggedTask.props.id === this.props.id) return;\n          this.setState({taskDrop: true})\n        }}\n        onDragLeave={() => this.setState({taskDrop: false})}\n        onDrop={(ev) => this.dropTask(ev, 'task')}\n        onDragOver={dragOver}\n      ></div>\n      </>\n    )\n  }\n}","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/components/List/List.js",["64","65"],"import React from 'react';\nimport './List.css';\nimport * as display from '../../services/display';\nimport * as edit from '../../services/edit';\nimport * as util from '../../services/util';\nimport TaskList from '../TaskList/TaskList';\n\nexport default class List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.taskList = React.createRef();\n    this.state = {\n      // filter subtasks here\n      subtasks: props.subtasks,\n      title: props.title,\n      info: {}, zoomed: ''\n    };\n  }\n  changeTitle(ev) {\n    this.setState({ title: ev.target.value });\n  }\n  sortList() {\n    // sort the given list by time\n    let ordered = true;\n    let currentTime = 0;\n    for (let x of this.subtasksCurrent) {\n      const task = window.data.tasks[util.stripR(x)];\n      const thisTime = util.getTime(task.info.startDate);\n      if (\n        task.info.type === 'event' &&\n        thisTime < currentTime\n      ) {\n        ordered = false;\n        break;\n      }\n      currentTime = thisTime;\n    }\n    if (ordered) return;\n    // sort the list\n    let sortedList = [];\n    let currentSort = ['start'];\n    for (let task of this.subtasksCurrent) {\n      const taskData = window.data.tasks[util.stripR(task)];\n      if (taskData.info.type === 'event' && \n        !taskData.info.startDate.includes('--')) {\n        sortedList.push(currentSort);\n        currentSort = [];\n        currentSort.push(task);\n      } else {\n        currentSort.push(task);\n      }\n    }\n    sortedList.push(currentSort); // add last thing\n    sortedList = sortedList.sort((a, b) => {\n      if (a[0] === 'start' || a.length === 0) {\n        a = a.splice(0, 1);\n        return -1;\n      } else if (b[0] === 'start' || b.length === 0) {\n        b = b.splice(0, 1);\n        return 1;\n      } else {\n        return util.getTime(window.data.tasks[util.stripR(a[0])].info.startDate) - \n          util.getTime(window.data.tasks[util.stripR(b[0])].info.startDate)\n      }\n    }).flat();\n    this.subtasksCurrent = sortedList;\n  }\n  updateHeights = () => {\n    return\n    if (!this.taskList.current) return;\n    const objects = this.taskList.current.subtaskObjects.filter(\n      x => x.current.isComplete() !== 'complete'\n    );\n    for (\n      let i = 0; i < objects.length - 1; i++\n    ) {\n      const thisObject = objects[i].current;\n      const nextObject = objects[i + 1].current;\n      let minHeight = 1;\n      if (\n        thisObject.state.info.type === 'event'\n      ) {\n        const endDate = thisObject.state.info.endDate;\n        if (!endDate.includes('--')) {\n          // rounded to 30 minutes\n          minHeight = (endDate[0] * 60 + endDate[1]) / 60;\n        } else if (nextObject.state.info.type === 'event') {\n          // no end date\n          const startDate = nextObject.state.info.startDate;\n          if (!startDate.includes('--')) {\n            const difference = \n              util.getTime(startDate) - util.getTime(thisObject.state.info.startDate);\n            minHeight = difference / 60;\n          }\n        }\n      }\n      thisObject.setState({ minHeight: minHeight });\n    }\n    if (objects.length > 0) {\n      let minHeight = 1;\n      const lastObject = objects[objects.length - 1].current;\n      const endDate = lastObject.state.info.endDate;\n      if (lastObject.state.info.type === 'event' &&\n        !endDate.includes('--')) {\n        // rounded to 30 minutes\n        minHeight = (endDate[0] * 60 + endDate[1]) / 60;\n      }\n      lastObject.setState({ minHeight: minHeight });\n    }\n  }\n  dropTask = (ev, type) => {\n    edit.selectTask(window.draggedTask);\n    const listParent = window.selected.props.parent;\n    edit.cutTask();\n    edit.save(listParent, 'list');\n    window.preventSelect = false;\n    setTimeout(() => {\n      edit.selectTask(this);\n      if (type === 'subtask') {\n        edit.pasteTask('task');\n      } else if (type === 'task') {\n        edit.pasteTask();\n      }\n    }, 100);\n    this.setState({\n      taskDrop: false,\n      subtaskDrop: false,\n    })\n    ev.stopPropagation();\n  }\n  render() {\n    var selectThis = () => {\n      edit.selectTask(this);\n    }\n    this.changeTitle = this.changeTitle.bind(this);\n    this.listInput = React.createRef();\n    this.subtasksCurrent = this.state.subtasks.filter(x =>\n      !(x.charAt(0) === 'R' && !this.props.repeats.includes(x)) &&\n      window.data.tasks[util.stripR(x)]);\n    if (this.props.parent.props.id === 'river') {\n      for (let task of this.props.repeats) {\n        if (!this.subtasksCurrent.includes(task) &&\n          !this.subtasksCurrent.includes(util.stripR(task))) {\n          this.subtasksCurrent.push(task);\n        }\n      }\n    }\n    if (util.getFrame(this).props.id === 'river') {\n      this.sortList();\n      setTimeout(this.updateHeights, 100);\n    }\n    const drop = (ev) => {\n      edit.selectTask(window.draggedTask);\n      const listParent = window.selected.props.parent;\n      edit.cutTask();\n      edit.save(listParent, 'list');\n      window.preventSelect = false;\n      setTimeout(() => {\n        edit.selectTask(this);\n        if (ev.metaKey) {\n          edit.pasteTask('task');\n        } else {\n          edit.pasteTask();\n        }\n      }, 100);\n      ev.stopPropagation();\n    }\n    const dragOver = (ev) => {\n      ev.preventDefault();\n      ev.dataTransfer.dropEffect = 'all';\n    }\n    const dragEnter = (ev) => {\n      ev.dataTransfer.dropEffect = 'all';\n    }\n    const dragLeave = (ev) => {\n      ev.dataTransfer.dropEffect = 'all';\n    }\n    return (\n      <div className={'list ' + this.state.zoomed} onClick={selectThis}\n        onContextMenu={selectThis}\n      >\n        <div className='listInputBackground'\n          onDragEnter={() => {\n            console.log(window.draggedTask.props.id);\n            if (window.draggedTask.props.id === this.props.id) return;\n            this.setState({taskDrop: true})\n          }}\n          onDragLeave={() => this.setState({taskDrop: false})}\n          onDrop={(ev) => this.dropTask(ev, 'subtask')}\n        >\n          {this.props.parent.props.id === 'bank' ?\n            <input className='listInput' value={this.state.title}\n              onChange={this.changeTitle} ref={this.listInput}\n              onDragOver={dragOver}\n              onDragEnter={dragEnter}\n              onDragLeave={dragLeave}\n            ></input> :\n            <input readOnly className='listInput listTitle'\n              value={util.dateFormat(this.state.title)} ref={this.listInput}\n              onDragOver={dragOver}\n              onDragEnter={dragEnter}\n            >\n            </input>\n          }\n        </div>\n        <div className='listFrame'>\n          {this.props.parent.props.id === 'river' &&\n            this.props.deadlines &&\n            <ul>\n              {this.props.deadlines.map(x => {\n                try {\n\n                return <li\n                  className='deadline' key={String(x)}\n                  onClick={() => display.searchDate(window.data.tasks[util.stripR(x)].title, 'start')}>\n                  {window.data.tasks[util.stripR(x)].title}</li>;\n                } catch {\n                  return undefined;\n                }\n              })}\n            </ul>}\n          {this.props.parent.props.id === 'river' &&\n            this.props.startdates &&\n            <ul>\n              {this.props.startdates.map(x => {\n                return (<li\n                  className='startdate' key={String(x)}\n                  onClick={() => display.searchDate(window.data.tasks[util.stripR(x)].title,\n                    'start')}>\n                  {window.data.tasks[util.stripR(x)].title}</li>);\n              })}\n            </ul>}\n          <div \n            className={`dropArea ${this.state.taskDrop ? 'droppable' : ''}`}\n            onDragOver={dragOver}\n          ></div>\n          {<TaskList ref={this.taskList} subtasks={this.subtasksCurrent}\n            parent={this} />}\n        </div>\n      </div>\n    )\n  }\n}","/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/components/TaskList/TaskList.js",[],"/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/client/src/components/SignIn/SignIn.js",["66","67","68"],"import './SignIn.css';\nimport '../App/App.css';\nimport { useState } from 'react';\nimport Axios from 'axios';\nimport imgSource from '../../assets/media/logo.png';\n\n// props has init function\nexport default function SignIn (props) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [password2, setPassword2] = useState('');\n  const [format, setFormat] = useState('login');\n\n  const login = () => {\n    if (format === 'create') {\n      console.log('create', username, password);\n      Axios.post('http://localhost:3001/createuser', {\n        username: username,\n        password: password,\n      });\n    } else if (format === 'login') {\n      console.log('login');\n    }\n  }\n\n  const confirm = () => {\n    props.init();\n  }\n\n  return (\n    <div className='signIn'>\n      <img \n        src={imgSource}\n        className='logo'\n      ></img>\n      <span className='title titleLarge'>\n        <span className='r'>River</span>\n        <span className='b'>Bank</span>\n      </span>\n      <p className='slogan'>go with the flow</p>\n      <div className='radioButtons'>\n        <button\n          className={`radioButton ${format === 'login' ? 'selected' : ''}`}\n          onClick={() => setFormat('login')}\n        >login</button>\n        <button\n          className={`radioButton ${format === 'create' ? 'selected' : ''}`}\n          onClick={() => setFormat('create')}\n        >create account</button>\n      </div>\n      <input \n        className='signInput'\n        placeholder='username'\n        onChange={(ev) => {\n          setUsername(ev.target.value);\n        }}\n      ></input>\n      <input \n        type='password'\n        className='signInput'\n        placeholder='password'\n        onChange={(ev) => {\n          setPassword(ev.target.value);\n        }}\n      ></input>\n      {format === 'create' &&\n      <input \n      type='password'\n      className='signInput'\n      placeholder='password again'\n      onChange={(ev) => {\n        setPassword2(ev.target.value);\n      }}\n    ></input>}\n      <button \n        className='loginButton'\n        onClick={login}\n      >enter</button>\n    </div>\n  )\n}",{"ruleId":"69","severity":1,"message":"70","line":72,"column":11,"nodeType":"71","messageId":"72","endLine":72,"endColumn":13},{"ruleId":"73","severity":1,"message":"74","line":289,"column":11,"nodeType":"75","endLine":289,"endColumn":67},{"ruleId":"76","severity":1,"message":"77","line":123,"column":9,"nodeType":"78","messageId":"79","endLine":123,"endColumn":17},{"ruleId":"69","severity":1,"message":"70","line":353,"column":21,"nodeType":"71","messageId":"72","endLine":353,"endColumn":23},{"ruleId":"80","severity":1,"message":"81","line":70,"column":5,"nodeType":"82","messageId":"83","endLine":109,"endColumn":6},{"ruleId":"76","severity":1,"message":"84","line":152,"column":11,"nodeType":"78","messageId":"79","endLine":152,"endColumn":15},{"ruleId":"76","severity":1,"message":"85","line":11,"column":10,"nodeType":"78","messageId":"79","endLine":11,"endColumn":19},{"ruleId":"76","severity":1,"message":"86","line":26,"column":9,"nodeType":"78","messageId":"79","endLine":26,"endColumn":16},{"ruleId":"87","severity":1,"message":"88","line":32,"column":7,"nodeType":"75","endLine":35,"endColumn":8},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","no-unused-vars","'endIndex' is assigned a value but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","IfStatement","unreachableCode","'drop' is assigned a value but never used.","'password2' is assigned a value but never used.","'confirm' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]