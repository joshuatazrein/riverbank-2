{"ast":null,"code":"'use strict';\n\nvar ReactNative = require('react-native');\n\nvar RNSound = ReactNative.NativeModules.RNSound;\nvar IsAndroid = RNSound.IsAndroid;\nvar IsWindows = RNSound.IsWindows;\n\nvar resolveAssetSource = require(\"react-native/Libraries/Image/resolveAssetSource\");\n\nvar eventEmitter = new ReactNative.NativeEventEmitter(RNSound);\nvar nextKey = 0;\n\nfunction isRelativePath(path) {\n  return !/^(\\/|http(s?)|asset|file)/.test(path);\n}\n\nfunction calculateRelativeVolume(volume, pan) {\n  // calculates a lower volume relative to the pan value\n  const relativeVolume = volume * (1 - Math.abs(pan));\n  return Number(relativeVolume.toFixed(1));\n}\n\nfunction setAndroidVolumes(sound) {\n  // calculates the volumes for left and right channels\n  if (sound._pan) {\n    const relativeVolume = calculateRelativeVolume(sound._volume, sound._pan);\n\n    if (sound._pan < 0) {\n      // left is louder\n      RNSound.setVolume(sound._key, sound._volume, relativeVolume);\n    } else {\n      // right is louder\n      RNSound.setVolume(sound._key, relativeVolume, sound._volume);\n    }\n  } else {\n    // no panning, same volume on both channels\n    RNSound.setVolume(sound._key, sound._volume, sound._volume);\n  }\n}\n\nfunction Sound(filename, basePath, onError, options) {\n  var asset = resolveAssetSource(filename);\n\n  if (asset) {\n    this._filename = asset.uri;\n    onError = basePath;\n  } else {\n    this._filename = basePath ? basePath + '/' + filename : filename;\n\n    if (IsAndroid && !basePath && isRelativePath(filename)) {\n      this._filename = filename.toLowerCase().replace(/\\.[^.]+$/, '');\n    }\n  }\n\n  this.registerOnPlay = function () {\n    if (this.onPlaySubscription != null) {\n      console.warn('On Play change event listener is already registered');\n      return;\n    }\n\n    if (!IsWindows) {\n      this.onPlaySubscription = eventEmitter.addListener('onPlayChange', param => {\n        const {\n          isPlaying,\n          playerKey\n        } = param;\n\n        if (playerKey === this._key) {\n          if (isPlaying) {\n            this._playing = true;\n          } else {\n            this._playing = false;\n          }\n        }\n      });\n    }\n  };\n\n  this._loaded = false;\n  this._key = nextKey++;\n  this._playing = false;\n  this._duration = -1;\n  this._numberOfChannels = -1;\n  this._volume = 1;\n  this._pan = 0;\n  this._numberOfLoops = 0;\n  this._speed = 1;\n  this._pitch = 1;\n  RNSound.prepare(this._filename, this._key, options || {}, (error, props) => {\n    if (props) {\n      if (typeof props.duration === 'number') {\n        this._duration = props.duration;\n      }\n\n      if (typeof props.numberOfChannels === 'number') {\n        this._numberOfChannels = props.numberOfChannels;\n      }\n    }\n\n    if (error === null) {\n      this._loaded = true;\n      this.registerOnPlay();\n    }\n\n    onError && onError(error, props);\n  });\n}\n\nSound.prototype.isLoaded = function () {\n  return this._loaded;\n};\n\nSound.prototype.play = function (onEnd) {\n  if (this._loaded) {\n    RNSound.play(this._key, onEnd ? successfully => onEnd(successfully) : null);\n  } else {\n    onEnd && onEnd(false);\n  }\n\n  return this;\n};\n\nSound.prototype.pause = function (callback) {\n  if (this._loaded) {\n    RNSound.pause(this._key, () => {\n      this._playing = false;\n      callback && callback();\n    });\n  }\n\n  return this;\n};\n\nSound.prototype.stop = function (callback) {\n  if (this._loaded) {\n    RNSound.stop(this._key, () => {\n      this._playing = false;\n      callback && callback();\n    });\n  }\n\n  return this;\n};\n\nSound.prototype.reset = function () {\n  if (this._loaded && IsAndroid) {\n    RNSound.reset(this._key);\n    this._playing = false;\n  }\n\n  return this;\n};\n\nSound.prototype.release = function () {\n  if (this._loaded) {\n    RNSound.release(this._key);\n    this._loaded = false;\n\n    if (!IsWindows) {\n      if (this.onPlaySubscription != null) {\n        this.onPlaySubscription.remove();\n        this.onPlaySubscription = null;\n      }\n    }\n  }\n\n  return this;\n};\n\nSound.prototype.getFilename = function () {\n  return this._filename;\n};\n\nSound.prototype.getDuration = function () {\n  return this._duration;\n};\n\nSound.prototype.getNumberOfChannels = function () {\n  return this._numberOfChannels;\n};\n\nSound.prototype.getVolume = function () {\n  return this._volume;\n};\n\nSound.prototype.getSpeed = function () {\n  return this._speed;\n};\n\nSound.prototype.getPitch = function () {\n  return this._pitch;\n};\n\nSound.prototype.setVolume = function (value) {\n  this._volume = value;\n\n  if (this._loaded) {\n    if (IsAndroid) {\n      setAndroidVolumes(this);\n    } else {\n      RNSound.setVolume(this._key, value);\n    }\n  }\n\n  return this;\n};\n\nSound.prototype.setPan = function (value) {\n  this._pan = value;\n\n  if (this._loaded) {\n    if (IsWindows) {\n      throw new Error('#setPan not supported on windows');\n    } else if (IsAndroid) {\n      setAndroidVolumes(this);\n    } else {\n      RNSound.setPan(this._key, value);\n    }\n  }\n\n  return this;\n};\n\nSound.prototype.getSystemVolume = function (callback) {\n  if (!IsWindows) {\n    RNSound.getSystemVolume(callback);\n  }\n\n  return this;\n};\n\nSound.prototype.setSystemVolume = function (value) {\n  if (IsAndroid) {\n    RNSound.setSystemVolume(value);\n  }\n\n  return this;\n};\n\nSound.prototype.getPan = function () {\n  return this._pan;\n};\n\nSound.prototype.getNumberOfLoops = function () {\n  return this._numberOfLoops;\n};\n\nSound.prototype.setNumberOfLoops = function (value) {\n  this._numberOfLoops = value;\n\n  if (this._loaded) {\n    if (IsAndroid || IsWindows) {\n      RNSound.setLooping(this._key, !!value);\n    } else {\n      RNSound.setNumberOfLoops(this._key, value);\n    }\n  }\n\n  return this;\n};\n\nSound.prototype.setSpeed = function (value) {\n  this._speed = value;\n\n  if (this._loaded) {\n    if (!IsWindows) {\n      RNSound.setSpeed(this._key, value);\n    }\n  }\n\n  return this;\n};\n\nSound.prototype.setPitch = function (value) {\n  this._pitch = value;\n\n  if (this._loaded) {\n    if (IsAndroid) {\n      RNSound.setPitch(this._key, value);\n    }\n  }\n\n  return this;\n};\n\nSound.prototype.getCurrentTime = function (callback) {\n  if (this._loaded) {\n    RNSound.getCurrentTime(this._key, callback);\n  }\n};\n\nSound.prototype.setCurrentTime = function (value) {\n  if (this._loaded) {\n    RNSound.setCurrentTime(this._key, value);\n  }\n\n  return this;\n}; // android only\n\n\nSound.prototype.setSpeakerphoneOn = function (value) {\n  if (IsAndroid) {\n    RNSound.setSpeakerphoneOn(this._key, value);\n  }\n}; // ios only\n// This is deprecated.  Call the static one instead.\n\n\nSound.prototype.setCategory = function (value) {\n  Sound.setCategory(value, false);\n};\n\nSound.prototype.isPlaying = function () {\n  return this._playing;\n};\n\nSound.enable = function (enabled) {\n  RNSound.enable(enabled);\n};\n\nSound.enableInSilenceMode = function (enabled) {\n  if (!IsAndroid && !IsWindows) {\n    RNSound.enableInSilenceMode(enabled);\n  }\n};\n\nSound.setActive = function (value) {\n  if (!IsAndroid && !IsWindows) {\n    RNSound.setActive(value);\n  }\n};\n\nSound.setCategory = function (value) {\n  let mixWithOthers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (!IsWindows) {\n    RNSound.setCategory(value, mixWithOthers);\n  }\n};\n\nSound.setMode = function (value) {\n  if (!IsAndroid && !IsWindows) {\n    RNSound.setMode(value);\n  }\n};\n\nSound.setSpeakerPhone = function (value) {\n  if (!IsAndroid && !IsWindows) {\n    RNSound.setSpeakerPhone(value);\n  }\n};\n\nSound.MAIN_BUNDLE = RNSound.MainBundlePath;\nSound.DOCUMENT = RNSound.NSDocumentDirectory;\nSound.LIBRARY = RNSound.NSLibraryDirectory;\nSound.CACHES = RNSound.NSCachesDirectory;\nmodule.exports = Sound;","map":{"version":3,"sources":["/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/node_modules/react-native-sound/sound.js"],"names":["ReactNative","require","RNSound","NativeModules","IsAndroid","IsWindows","resolveAssetSource","eventEmitter","NativeEventEmitter","nextKey","isRelativePath","path","test","calculateRelativeVolume","volume","pan","relativeVolume","Math","abs","Number","toFixed","setAndroidVolumes","sound","_pan","_volume","setVolume","_key","Sound","filename","basePath","onError","options","asset","_filename","uri","toLowerCase","replace","registerOnPlay","onPlaySubscription","console","warn","addListener","param","isPlaying","playerKey","_playing","_loaded","_duration","_numberOfChannels","_numberOfLoops","_speed","_pitch","prepare","error","props","duration","numberOfChannels","prototype","isLoaded","play","onEnd","successfully","pause","callback","stop","reset","release","remove","getFilename","getDuration","getNumberOfChannels","getVolume","getSpeed","getPitch","value","setPan","Error","getSystemVolume","setSystemVolume","getPan","getNumberOfLoops","setNumberOfLoops","setLooping","setSpeed","setPitch","getCurrentTime","setCurrentTime","setSpeakerphoneOn","setCategory","enable","enabled","enableInSilenceMode","setActive","mixWithOthers","setMode","setSpeakerPhone","MAIN_BUNDLE","MainBundlePath","DOCUMENT","NSDocumentDirectory","LIBRARY","NSLibraryDirectory","CACHES","NSCachesDirectory","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar ReactNative = require('react-native');\nvar RNSound = ReactNative.NativeModules.RNSound;\nvar IsAndroid = RNSound.IsAndroid;\nvar IsWindows = RNSound.IsWindows;\nvar resolveAssetSource = require(\"react-native/Libraries/Image/resolveAssetSource\");\nvar eventEmitter = new ReactNative.NativeEventEmitter(RNSound);\n\nvar nextKey = 0;\n\nfunction isRelativePath(path) {\n  return !/^(\\/|http(s?)|asset|file)/.test(path);\n}\n\nfunction calculateRelativeVolume(volume, pan) {\n  // calculates a lower volume relative to the pan value\n  const relativeVolume = (volume * (1 - Math.abs(pan)));\n  return Number(relativeVolume.toFixed(1));\n}\n\nfunction setAndroidVolumes(sound) {\n  // calculates the volumes for left and right channels\n  if (sound._pan) {\n    const relativeVolume = calculateRelativeVolume(sound._volume, sound._pan);\n    if (sound._pan < 0) {\n      // left is louder\n      RNSound.setVolume(sound._key, sound._volume, relativeVolume);\n    } else {\n      // right is louder\n      RNSound.setVolume(sound._key, relativeVolume, sound._volume);\n    }\n  } else {\n    // no panning, same volume on both channels\n    RNSound.setVolume(sound._key, sound._volume, sound._volume);\n  }\n}\n\nfunction Sound(filename, basePath, onError, options) {\n  var asset = resolveAssetSource(filename);\n  if (asset) {\n    this._filename = asset.uri;\n    onError = basePath;\n  } else {\n    this._filename = basePath ? basePath + '/' + filename : filename;\n\n    if (IsAndroid && !basePath && isRelativePath(filename)) {\n      this._filename = filename.toLowerCase().replace(/\\.[^.]+$/, '');\n    }\n  }\n\n  this.registerOnPlay = function() {\n    if (this.onPlaySubscription != null) {\n      console.warn('On Play change event listener is already registered');\n      return;\n    }\n\n    if (!IsWindows) {\n      this.onPlaySubscription = eventEmitter.addListener(\n        'onPlayChange',\n        (param) => {\n          const { isPlaying, playerKey } = param;\n          if (playerKey === this._key) {\n            if (isPlaying) {\n              this._playing = true;\n            }\n            else {\n              this._playing = false;\n            }\n          }\n        },\n      );\n    }\n  }\n\n  this._loaded = false;\n  this._key = nextKey++;\n  this._playing = false;\n  this._duration = -1;\n  this._numberOfChannels = -1;\n  this._volume = 1;\n  this._pan = 0;\n  this._numberOfLoops = 0;\n  this._speed = 1;\n  this._pitch = 1;\n  RNSound.prepare(this._filename, this._key, options || {}, (error, props) => {\n    if (props) {\n      if (typeof props.duration === 'number') {\n        this._duration = props.duration;\n      }\n      if (typeof props.numberOfChannels === 'number') {\n        this._numberOfChannels = props.numberOfChannels;\n      }\n    }\n    if (error === null) {\n      this._loaded = true;\n      this.registerOnPlay();\n    }\n    onError && onError(error, props);\n  });\n}\n\nSound.prototype.isLoaded = function() {\n  return this._loaded;\n};\n\nSound.prototype.play = function(onEnd) {\n  if (this._loaded) {\n    RNSound.play(this._key, onEnd ? (successfully) => onEnd(successfully) : null);\n  } else {\n    onEnd && onEnd(false);\n  }\n  return this;\n};\n\nSound.prototype.pause = function(callback) {\n  if (this._loaded) {\n    RNSound.pause(this._key, () => {\n      this._playing = false;\n      callback && callback();\n    });\n  }\n  return this;\n};\n\nSound.prototype.stop = function(callback) {\n  if (this._loaded) {\n    RNSound.stop(this._key, () => {\n      this._playing = false;\n      callback && callback();\n    });\n  }\n  return this;\n};\n\nSound.prototype.reset = function() {\n  if (this._loaded && IsAndroid) {\n    RNSound.reset(this._key);\n    this._playing = false;\n  }\n  return this;\n};\n\nSound.prototype.release = function() {\n  if (this._loaded) {\n    RNSound.release(this._key);\n    this._loaded = false;\n    if (!IsWindows) {\n      if (this.onPlaySubscription != null) {\n        this.onPlaySubscription.remove();\n        this.onPlaySubscription = null;\n      }\n    }\n  }\n  return this;\n};\n\nSound.prototype.getFilename = function() {\n  return this._filename;\n};\n\nSound.prototype.getDuration = function() {\n  return this._duration;\n};\n\nSound.prototype.getNumberOfChannels = function() {\n  return this._numberOfChannels;\n};\n\nSound.prototype.getVolume = function() {\n  return this._volume;\n};\n\nSound.prototype.getSpeed = function() {\n  return this._speed;\n};\n\nSound.prototype.getPitch = function() {\n  return this._pitch;\n};\n\nSound.prototype.setVolume = function(value) {\n  this._volume = value;\n  if (this._loaded) {\n    if (IsAndroid) {\n      setAndroidVolumes(this)\n    } else {\n      RNSound.setVolume(this._key, value);\n    }\n  }\n  return this;\n};\n\nSound.prototype.setPan = function(value) {\n  this._pan = value;\n  if (this._loaded) {\n    if (IsWindows) {\n      throw new Error('#setPan not supported on windows');\n    } else if (IsAndroid) {\n      setAndroidVolumes(this)\n    } else {\n      RNSound.setPan(this._key, value);\n    }\n  }\n  return this;\n};\n\nSound.prototype.getSystemVolume = function(callback) {\n  if(!IsWindows) {\n    RNSound.getSystemVolume(callback);\n  }\n  return this;\n};\n\nSound.prototype.setSystemVolume = function(value) {\n  if (IsAndroid) {\n    RNSound.setSystemVolume(value);\n  }\n  return this;\n};\n\nSound.prototype.getPan = function() {\n  return this._pan;\n};\n\nSound.prototype.getNumberOfLoops = function() {\n  return this._numberOfLoops;\n};\n\nSound.prototype.setNumberOfLoops = function(value) {\n  this._numberOfLoops = value;\n  if (this._loaded) {\n    if (IsAndroid || IsWindows) {\n      RNSound.setLooping(this._key, !!value);\n    } else {\n      RNSound.setNumberOfLoops(this._key, value);\n    }\n  }\n  return this;\n};\n\nSound.prototype.setSpeed = function(value) {\n  this._speed = value;\n  if (this._loaded) {\n    if (!IsWindows) {\n      RNSound.setSpeed(this._key, value);\n    }\n  }\n  return this;\n};\n\nSound.prototype.setPitch = function(value) {\n  this._pitch = value;\n  if (this._loaded) {\n    if (IsAndroid) {\n      RNSound.setPitch(this._key, value);\n    }\n  }\n  return this;\n};\n\nSound.prototype.getCurrentTime = function(callback) {\n  if (this._loaded) {\n    RNSound.getCurrentTime(this._key, callback);\n  }\n};\n\nSound.prototype.setCurrentTime = function(value) {\n  if (this._loaded) {\n    RNSound.setCurrentTime(this._key, value);\n  }\n  return this;\n};\n\n// android only\nSound.prototype.setSpeakerphoneOn = function(value) {\n  if (IsAndroid) {\n    RNSound.setSpeakerphoneOn(this._key, value);\n  }\n};\n\n// ios only\n\n// This is deprecated.  Call the static one instead.\n\nSound.prototype.setCategory = function(value) {\n  Sound.setCategory(value, false);\n}\n\nSound.prototype.isPlaying = function() {\n  return this._playing;\n}\n\nSound.enable = function(enabled) {\n  RNSound.enable(enabled);\n};\n\nSound.enableInSilenceMode = function(enabled) {\n  if (!IsAndroid && !IsWindows) {\n    RNSound.enableInSilenceMode(enabled);\n  }\n};\n\nSound.setActive = function(value) {\n  if (!IsAndroid && !IsWindows) {\n    RNSound.setActive(value);\n  }\n};\n\nSound.setCategory = function(value, mixWithOthers = false) {\n  if (!IsWindows) {\n    RNSound.setCategory(value, mixWithOthers);\n  }\n};\n\nSound.setMode = function(value) {\n  if (!IsAndroid && !IsWindows) {\n    RNSound.setMode(value);\n  }\n};\n\nSound.setSpeakerPhone = function(value) {\n  if (!IsAndroid && !IsWindows) {\n    RNSound.setSpeakerPhone(value)\n  }\n}\n\nSound.MAIN_BUNDLE = RNSound.MainBundlePath;\nSound.DOCUMENT = RNSound.NSDocumentDirectory;\nSound.LIBRARY = RNSound.NSLibraryDirectory;\nSound.CACHES = RNSound.NSCachesDirectory;\n\nmodule.exports = Sound;\n"]},"metadata":{},"sourceType":"script"}