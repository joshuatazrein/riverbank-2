{"ast":null,"code":"var _jsxFileName = \"/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/src/components/Frame/Frame.js\";\nimport React from 'react';\nimport './Frame.css';\nimport * as display from '../../services/display/display';\nimport * as util from '../../services/util/util';\nimport List from '../List/List';\nimport $ from 'jquery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Frame extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.todayIndex = () => {\n      const today = new Date();\n      return this.state.subtasks.findIndex(x => {\n        const now = new Date(window.data.tasks[x].title);\n        return now.getDate() === today.getDate() && now.getMonth() === today.getMonth() && now.getFullYear() === today.getFullYear();\n      });\n    };\n\n    this.addList = id => {\n      // add a new list\n      var title;\n\n      if (this.props.id === 'river') {\n        const lastDate = new Date(window.data.tasks[this.state.subtasks[this.state.subtasks.length - 1]].title);\n        lastDate.setDate(lastDate.getDate() + 1);\n        title = lastDate.toDateString();\n      } else {\n        title = '';\n      }\n\n      const subtasks = this.state.subtasks;\n      if (!id) id = String(new Date().getTime());\n      window.data.tasks[id] = {\n        title: title,\n        subtasks: [],\n        info: {}\n      };\n      subtasks.push(id);\n      this.setState({\n        subtasks: subtasks\n      });\n      setTimeout(() => {\n        this.frames[this.frames.length - 1].current.listInput.current.focus();\n      }, 100);\n    };\n\n    this.addLists = () => {\n      if (this.props.id === 'river') {\n        const id = new Date().getTime();\n\n        for (let i = 0; i < 7; i++) {\n          this.addList(id + i);\n        }\n      } else {\n        this.addList();\n      }\n    };\n\n    this.changeIndex = async (val, set) => {\n      var newIndex;\n\n      if (set === true) {\n        newIndex = val;\n      } else {\n        newIndex = this.state.info.index + val;\n      }\n\n      if (!this.frame) return;\n\n      const finish = () => {\n        const children = $(this.frame.current).children();\n\n        if (children[newIndex]) {\n          children[newIndex].scrollIntoView();\n        }\n\n        console.log(window.data.tasks[this.state.subtasks[this.state.info.index]].title);\n      };\n\n      this.setState({\n        info: { ...this.state.info,\n          index: newIndex\n        }\n      }, finish);\n    };\n\n    this.updatePosition = () => {\n      if (this.state.focused === 'focused') return;\n      if (this.props.id !== 'river') return;\n      if (this.scrollPos === undefined) this.scrollPos = Math.floor($(this.frameContainer.current).scrollLeft() / 300) * 300;\n      const position = $(this.frameContainer.current).scrollLeft();\n\n      if (Math.abs(position - scrollPos) > 300) {\n        this.scrollPos = Math.floor(position / 300) * 300; // this.setState({ index: this.state.shownIndex + \n        //   Math.floor(scrollPos / 300) });\n\n        console.log(this.state.shownIndex + Math.floor(this.scrollPos / 300));\n        this.setState({\n          info: { ...this.state.info,\n            index: this.state.shownIndex + Math.floor(scrollPos / 300)\n          }\n        });\n      }\n    };\n\n    this.state = {\n      subtasks: props.subtasks,\n      info: props.info,\n      width: display.processWidth(props.info.focused),\n      zoomed: ''\n    };\n\n    if (props.id === 'river') {\n      this.state.repeats = window.data.settings.repeats;\n      this.state.shownIndex = this.todayIndex();\n    } else if (props.id === 'bank') {\n      this.state.shownIndex = 0;\n    }\n  } // find index of today in shownLists\n\n\n  componentDidMount() {\n    this.updatePosition();\n  }\n\n  render() {\n    var resizeCheck = () => {\n      if (this.state.width !== display.processWidth(this.state.info.focused)) {\n        this.setState({\n          width: display.processWidth(this.state.info.focused)\n        });\n      }\n    };\n\n    let endIndex = this.state.info.index + this.state.width;\n    this.frames = [];\n    window.addEventListener('resize', resizeCheck);\n    const shownLists = this.state.subtasks.slice(this.state.shownIndex);\n    this.frame = /*#__PURE__*/React.createRef();\n    this.frameContainer = /*#__PURE__*/React.createRef();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `frameContainer \n        ${this.state.info.focused} ${this.state.zoomed} ${this.props.id}`,\n      onScroll: this.updatePosition,\n      ref: this.frameContainer,\n      children: [this.props.id === 'river' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"monthYear\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: window.data.tasks[this.state.subtasks[this.state.info.index]].title.slice(4, 8)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: window.data.tasks[this.state.subtasks[this.state.info.index]].title.slice(11)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: this.props.id,\n        className: 'frame',\n        ref: this.frame,\n        children: [shownLists.map(x => {\n          this.frames.push( /*#__PURE__*/React.createRef());\n          const task = window.data.tasks[x];\n\n          if (this.props.id === 'river') {\n            // render state correctly in original lists\n            return /*#__PURE__*/_jsxDEV(List, {\n              id: x,\n              title: task.title,\n              subtasks: task.subtasks,\n              parent: this,\n              deadlines: this.props.deadlines[task.title],\n              startdates: this.props.startdates[task.title],\n              repeats: this.state.repeats[util.dateFormat(task.title).slice(0, 3)],\n              ref: this.frames[this.frames.length - 1]\n            }, x, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(List, {\n              id: x,\n              title: task.title,\n              subtasks: task.subtasks,\n              parent: this,\n              ref: this.frames[this.frames.length - 1]\n            }, x, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this);\n          }\n        }), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"changeButton\",\n          title: \"add list or date\",\n          onClick: () => this.addLists(),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/src/components/Frame/Frame.js"],"names":["React","display","util","List","$","Frame","Component","constructor","props","todayIndex","today","Date","state","subtasks","findIndex","x","now","window","data","tasks","title","getDate","getMonth","getFullYear","addList","id","lastDate","length","setDate","toDateString","String","getTime","info","push","setState","setTimeout","frames","current","listInput","focus","addLists","i","changeIndex","val","set","newIndex","index","frame","finish","children","scrollIntoView","console","log","updatePosition","focused","scrollPos","undefined","Math","floor","frameContainer","scrollLeft","position","abs","shownIndex","width","processWidth","zoomed","repeats","settings","componentDidMount","render","resizeCheck","endIndex","addEventListener","shownLists","slice","createRef","map","task","deadlines","startdates","dateFormat"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Frame.css';\nimport * as display from '../../services/display/display';\nimport * as util from '../../services/util/util';\nimport List from '../List/List';\nimport $ from 'jquery';\n\nexport default class Frame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subtasks: props.subtasks, info: props.info,\n      width: display.processWidth(props.info.focused),\n      zoomed: '',\n    };\n    if (props.id === 'river') {\n      this.state.repeats = window.data.settings.repeats;\n      this.state.shownIndex = this.todayIndex();\n    } else if (props.id === 'bank') {\n      this.state.shownIndex = 0;\n    }\n  }\n\n  // find index of today in shownLists\n  todayIndex = () => {\n    const today = new Date();\n    return this.state.subtasks.findIndex(x => {\n      const now = new Date(window.data.tasks[x].title);\n      return now.getDate() === today.getDate() &&\n        now.getMonth() === today.getMonth() &&\n        now.getFullYear() === today.getFullYear()\n    })\n  }\n\n  // create a new list\n  addList = (id) => {\n    // add a new list\n    var title;\n    if (this.props.id === 'river') {\n      const lastDate = new Date(\n        window.data.tasks[this.state.subtasks[this.state.subtasks.length - 1]].title);\n      lastDate.setDate(lastDate.getDate() + 1);\n      title = lastDate.toDateString();\n    } else {\n      title = '';\n    }\n\n    const subtasks = this.state.subtasks;\n    if (!id) id = String(new Date().getTime());\n    window.data.tasks[id] = {\n      title: title, subtasks: [], info: {}\n    }\n    subtasks.push(id);\n    this.setState({subtasks: subtasks});\n    setTimeout(() => {\n      this.frames[this.frames.length - 1].current.listInput.current.focus();\n    }, 100);\n  }\n\n  addLists = () => {\n    if (this.props.id === 'river') {\n      const id = new Date().getTime();\n      for (let i = 0; i < 7; i ++) {\n        this.addList(id + i);\n      }\n    } else {\n      this.addList();\n    }\n  }\n\n  changeIndex = async (val, set) => {\n    var newIndex;\n    if (set === true) {\n      newIndex = val;\n    } else {\n      newIndex = this.state.info.index + val;\n    }\n    if (!this.frame) return;\n\n    const finish = () => {\n      const children = $(this.frame.current).children();\n      if (children[newIndex]) {\n        children[newIndex].scrollIntoView();\n      }\n      console.log(\n        window.data.tasks[this.state.subtasks[this.state.info.index]]\n        .title);\n    }\n\n    this.setState({\n      info: {...this.state.info, index: newIndex}\n    }, finish);\n  }\n\n  updatePosition = () => {\n    if (this.state.focused === 'focused') return;\n    if (this.props.id !== 'river') return;\n    if (this.scrollPos === undefined) this.scrollPos = \n      Math.floor($(this.frameContainer.current).scrollLeft() / 300) * 300;\n    const position = $(this.frameContainer.current).scrollLeft();\n    if (Math.abs(position - scrollPos) > 300) {\n      this.scrollPos = Math.floor(position / 300) * 300;\n      // this.setState({ index: this.state.shownIndex + \n      //   Math.floor(scrollPos / 300) });\n      console.log(this.state.shownIndex + Math.floor(this.scrollPos / 300));\n      this.setState({ info: \n        {\n          ...this.state.info, \n          index: this.state.shownIndex + Math.floor(scrollPos / 300)\n        }\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.updatePosition();\n  }\n\n  render() {\n    var resizeCheck = () => {\n      if (this.state.width !== display.processWidth(this.state.info.focused)) {\n        this.setState({ width: display.processWidth(this.state.info.focused) });\n      }\n    }\n    let endIndex = this.state.info.index + this.state.width;\n    this.frames = [];\n    window.addEventListener('resize', resizeCheck);\n    const shownLists = this.state.subtasks.slice(\n      this.state.shownIndex\n    );\n    this.frame = React.createRef();\n    this.frameContainer = React.createRef();\n    return (\n      <div className={`frameContainer \n        ${this.state.info.focused} ${this.state.zoomed} ${this.props.id}`}\n        onScroll={this.updatePosition} ref={this.frameContainer}>\n        {this.props.id === 'river' &&\n        <div className='monthYear'>\n          <span>{\n            window.data.tasks[this.state.subtasks[this.state.info.index]]\n              .title.slice(4, 8)}</span>\n          <span>{\n            window.data.tasks[this.state.subtasks[this.state.info.index]]\n              .title.slice(11)}</span>\n        </div>}\n        <div id={this.props.id}\n          className={'frame'} ref={this.frame}>\n          {shownLists.map(x => {\n            this.frames.push(React.createRef());\n            const task = window.data.tasks[x];\n            if (this.props.id === 'river') {\n              // render state correctly in original lists\n              return (\n                <List key={x} id={x} title={task.title}\n                  subtasks={task.subtasks} parent={this}\n                  deadlines={this.props.deadlines[task.title]}\n                  startdates={this.props.startdates[task.title]}\n                  repeats={this.state.repeats[util.dateFormat(task.title)\n                    .slice(0, 3)]}\n                  ref={this.frames[this.frames.length - 1]} />\n              )\n            } else {\n              return (\n                <List key={x} id={x} title={task.title}\n                  subtasks={task.subtasks} parent={this}\n                  ref={this.frames[this.frames.length - 1]} />\n              )\n            }\n          })}\n          <button className='changeButton' title='add list or date'\n            onClick={() => this.addLists()}>+</button>\n        </div>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}