{"ast":null,"code":"import $ from 'jquery';\nimport * as util from '../util';\nexport function reset() {\n  var accept = window.confirm('Are you sure you want to reset all window.data?');\n\n  if (accept) {\n    window.data = window.resetData;\n    localStorage.setItem('data', JSON.stringify(window.resetData));\n    setTimeout(function () {\n      window.location.reload();\n    }, 200);\n  }\n}\nexport function restore() {\n  window.preventReturn = true;\n  const textarea = $('<textarea class=\"restore\"></textarea>');\n  $('#root').append(textarea);\n  textarea.on('keydown', ev => {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n      window.data = JSON.parse(textarea.val());\n      localStorage.setItem('data', JSON.stringify(window.data));\n      window.location.reload();\n    } else if (ev.key === 'Escape') {\n      textarea.remove();\n      setTimeout(() => window.preventReturn = false, 100);\n    }\n  });\n}\nexport function backup() {\n  alert('open console to copy window.data (file download option will be added soon)');\n  util.consoleLog(JSON.stringify(window.data));\n}\nexport function clean() {\n  function removeDeadline(list, id) {\n    for (let x of Object.keys(list)) {\n      // switch it out of things\n      let deadlineList = list[x];\n\n      if (deadlineList.includes(id)) {\n        deadlineList = deadlineList.splice(deadlineList.findIndex(x => x === id), 1);\n      }\n    }\n  } // clean out tasks which aren't in lists\n\n\n  for (let id of Object.keys(window.data.tasks).filter(x => !['river', 'bank'].includes(x))) {\n    let found = false;\n\n    for (let containerId of Object.keys(window.data.tasks)) {\n      if (window.data.tasks[containerId].subtasks.map(x => util.stripR(x)).includes(id)) {\n        found = true;\n        break;\n      }\n    }\n\n    if (found === false) {\n      delete window.data.tasks[id];\n      removeDeadline(window.data.settings.deadlines, id);\n      removeDeadline(window.data.settings.startdates, id);\n    }\n  } // clean out empty dates in the river view\n\n\n  const dates = window.data.tasks['river'].subtasks;\n  let i = dates.length - 1;\n  const today = new Date().toDateString();\n\n  while (window.data.tasks[dates[i]].subtasks.length === 0) {\n    i--;\n    const now = window.data.tasks[dates[i]].title;\n    if (i == 0 || now === today) break;\n  }\n\n  if (i < dates.length - 1) {\n    window.data.tasks['river'].subtasks = dates.slice(0, i + 1);\n  }\n}","map":{"version":3,"sources":["/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/src/services/saving.js"],"names":["$","util","reset","accept","window","confirm","data","resetData","localStorage","setItem","JSON","stringify","setTimeout","location","reload","restore","preventReturn","textarea","append","on","ev","key","preventDefault","parse","val","remove","backup","alert","consoleLog","clean","removeDeadline","list","id","x","Object","keys","deadlineList","includes","splice","findIndex","tasks","filter","found","containerId","subtasks","map","stripR","settings","deadlines","startdates","dates","i","length","today","Date","toDateString","now","title","slice"],"mappings":"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","sourcesContent":["import $ from 'jquery';\nimport * as util from '../util';\n\nexport function reset() {\n  var accept = window.confirm('Are you sure you want to reset all window.data?');\n  if (accept) {\n    window.data = window.resetData;\n    localStorage.setItem('data', JSON.stringify(window.resetData));\n    setTimeout(function () { window.location.reload() }, 200);\n  }\n}\n\nexport function restore() {\n  window.preventReturn = true;\n  const textarea = $('<textarea class=\"restore\"></textarea>');\n  $('#root').append(textarea);\n  textarea.on('keydown', ev => {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n      window.data = JSON.parse(textarea.val());\n      localStorage.setItem('data', JSON.stringify(window.data));\n      window.location.reload();\n    } else if (ev.key === 'Escape') {\n      textarea.remove();\n      setTimeout(() => window.preventReturn = false, 100);\n    }\n  })\n}\n\nexport function backup() {\n  alert('open console to copy window.data (file download option will be added soon)');\n  util.consoleLog(JSON.stringify(window.data));\n}\n\nexport function clean() {\n  function removeDeadline(list, id) {\n    for (let x of Object.keys(list)) {\n      // switch it out of things\n      let deadlineList = list[x];\n      if (deadlineList.includes(id)) {\n        deadlineList =\n          deadlineList.splice(deadlineList.findIndex(x => x === id), 1);\n      }\n    }\n  }\n  // clean out tasks which aren't in lists\n  for (let id of Object.keys(window.data.tasks).filter(x =>\n    !['river', 'bank'].includes(x))) {\n    let found = false;\n    for (let containerId of Object.keys(window.data.tasks)) {\n      if (window.data.tasks[containerId].subtasks.map(x =>\n        util.stripR(x)).includes(id)) {\n        found = true;\n        break;\n      }\n    }\n    if (found === false) {\n      delete window.data.tasks[id];\n      removeDeadline(window.data.settings.deadlines, id);\n      removeDeadline(window.data.settings.startdates, id);\n    }\n  }\n\n  // clean out empty dates in the river view\n  const dates = window.data.tasks['river'].subtasks;\n  let i = dates.length - 1;\n  const today = new Date().toDateString();\n\n  while(window.data.tasks[dates[i]].subtasks.length === 0) {\n    i --;\n    const now = window.data.tasks[dates[i]].title;\n    if (i == 0 || now === today) break;\n  }\n  if (i < dates.length - 1) {\n    window.data.tasks['river'].subtasks = dates.slice(0, i + 1);\n  }\n}"]},"metadata":{},"sourceType":"module"}