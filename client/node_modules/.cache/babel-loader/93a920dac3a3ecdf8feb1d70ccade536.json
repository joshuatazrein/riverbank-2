{"ast":null,"code":"var _jsxFileName = \"/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/src/components/Frame/Frame.js\";\nimport React from 'react';\nimport './Frame.css';\nimport * as display from '../../services/display/display';\nimport * as util from '../../services/util/util';\nimport List from '../List/List';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Frame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subtasks: props.subtasks,\n      info: props.info,\n      width: display.processWidth(props.info.focused),\n      zoomed: ''\n    };\n\n    if (props.id === 'river') {\n      this.state.repeats = window.data.settings.repeats;\n    }\n  }\n\n  changeIndex(val, set) {\n    let newIndex;\n\n    if (set === true) {\n      newIndex = val;\n    } else {\n      newIndex = this.state.info.index + val;\n    }\n\n    if (newIndex > 0 && window.data.tasks[this.state.subtasks[newIndex - 1]].title === '--') {\n      return;\n    }\n\n    if (set !== undefined && newIndex > this.state.info.index && this.props.id === 'bank') {\n      newIndex -= this.state.width - 1;\n    }\n\n    if (newIndex < 0) newIndex = 0;\n    this.setState(prevState => ({\n      info: { ...prevState.info,\n        index: newIndex\n      }\n    }));\n  }\n\n  render() {\n    const lastDate = new Date(window.data.tasks[this.state.subtasks[this.state.subtasks.length - 1]].title);\n    let j = 0;\n    let c = Math.floor(Math.random() * 1000);\n\n    while (this.state.subtasks.length < this.state.info.index + 7) {\n      j++;\n      var title;\n\n      if (this.props.id === 'bank') {\n        title = '--';\n      } else if (this.props.id === 'river') {\n        const date = new Date(lastDate.getTime());\n        date.setDate(lastDate.getDate() + j);\n        title = date.toDateString();\n      }\n\n      const now = new Date();\n      const id = now.getTime(); // preventing overlap\n\n      let i = Math.floor(Math.random() * 1000) + c;\n\n      while (window.data.tasks[String(id + i)] !== undefined) {\n        i += 1;\n      }\n\n      window.data.tasks[String(id + i)] = {\n        title: title,\n        subtasks: [],\n        info: {}\n      };\n      this.state.subtasks.push(String(id + i));\n    }\n\n    function resizeCheck() {\n      if (this.state.width != display.processWidth(this.state.info.focused)) {\n        this.setState({\n          width: display.processWidth(this.state.info.focused)\n        });\n      }\n    }\n\n    let endIndex = this.state.info.index + this.state.width;\n    this.changeIndex = this.changeIndex.bind(this);\n    resizeCheck = resizeCheck.bind(this);\n    this.frames = [];\n    window.addEventListener('resize', resizeCheck);\n    const shownLists = this.state.subtasks.slice(this.state.info.index, endIndex);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: this.props.id,\n      className: 'frame ' + this.state.info.focused + ' ' + this.state.zoomed,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"changeButton\",\n        onClick: () => this.changeIndex(this.state.width * -1),\n        children: \"<\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), shownLists.map(x => {\n        this.frames.push( /*#__PURE__*/React.createRef());\n        const task = window.data.tasks[x];\n\n        if (this.props.id === 'river') {\n          // render state correctly in original lists\n          return /*#__PURE__*/_jsxDEV(List, {\n            id: x,\n            title: task.title,\n            subtasks: task.subtasks,\n            parent: this,\n            deadlines: this.props.deadlines[task.title],\n            startdates: this.props.startdates[task.title],\n            repeats: this.state.repeats[util.dateFormat(task.title).slice(0, 3)],\n            ref: this.frames[this.frames.length - 1]\n          }, x, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(List, {\n            id: x,\n            title: task.title,\n            subtasks: task.subtasks,\n            parent: this,\n            ref: this.frames[this.frames.length - 1]\n          }, x, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this);\n        }\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"changeButton\",\n        onClick: () => this.changeIndex(this.state.width),\n        children: \">\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/src/components/Frame/Frame.js"],"names":["React","display","util","List","Frame","Component","constructor","props","state","subtasks","info","width","processWidth","focused","zoomed","id","repeats","window","data","settings","changeIndex","val","set","newIndex","index","tasks","title","undefined","setState","prevState","render","lastDate","Date","length","j","c","Math","floor","random","date","getTime","setDate","getDate","toDateString","now","i","String","push","resizeCheck","endIndex","bind","frames","addEventListener","shownLists","slice","map","x","createRef","task","deadlines","startdates","dateFormat"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Frame.css';\nimport * as display from '../../services/display/display';\nimport * as util from '../../services/util/util';\nimport List from '../List/List';\n\nexport default class Frame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subtasks: props.subtasks, info: props.info,\n      width: display.processWidth(props.info.focused),\n      zoomed: '',\n    };\n    if (props.id === 'river') {\n      this.state.repeats = window.data.settings.repeats;\n    }\n  }\n  changeIndex(val, set) {\n    let newIndex;\n    if (set === true) {\n      newIndex = val;\n    } else {\n      newIndex = this.state.info.index + val;\n    }\n    if (newIndex > 0 &&\n      window.data.tasks[this.state.subtasks[newIndex - 1]].title === '--') {\n      return;\n    }\n    if (\n      set !== undefined && \n      newIndex > this.state.info.index && \n      this.props.id === 'bank'\n    ) {\n      newIndex -= (this.state.width - 1);\n    }\n    if (newIndex < 0) newIndex = 0;\n    this.setState(prevState => ({\n      info: { ...prevState.info, index: newIndex }\n    }));\n  }\n  render() {\n    const lastDate = new Date(\n      window.data.tasks[this.state.subtasks[this.state.subtasks.length - 1]].title);\n    let j = 0;\n    let c = Math.floor(Math.random() * 1000);\n    while (this.state.subtasks.length < this.state.info.index + 7) {\n      j++;\n      var title;\n      if (this.props.id === 'bank') {\n        title = '--';\n      } else if (this.props.id === 'river') {\n        const date = new Date(lastDate.getTime());\n        date.setDate(lastDate.getDate() + j);\n        title = date.toDateString();\n      }\n      const now = new Date();\n      const id = now.getTime();\n      // preventing overlap\n      let i = Math.floor(Math.random() * 1000) + c;\n      while (window.data.tasks[String(id + i)] !== undefined) {\n        i += 1;\n      }\n      window.data.tasks[String(id + i)] = { title: title, subtasks: [], info: {} };\n      this.state.subtasks.push(String(id + i));\n    }\n    function resizeCheck() {\n      if (this.state.width != display.processWidth(this.state.info.focused)) {\n        this.setState({ width: display.processWidth(this.state.info.focused) });\n      }\n    }\n    let endIndex = this.state.info.index + this.state.width;\n    this.changeIndex = this.changeIndex.bind(this);\n    resizeCheck = resizeCheck.bind(this);\n    this.frames = [];\n    window.addEventListener('resize', resizeCheck);\n    const shownLists =\n      this.state.subtasks.slice(this.state.info.index, endIndex);\n    return (\n      <div id={this.props.id}\n        className={'frame ' + this.state.info.focused + ' ' +\n          this.state.zoomed}>\n        <button className='changeButton'\n          onClick={() => this.changeIndex(this.state.width * -1)}>&lt;\n        </button>\n        {shownLists.map(x => {\n          this.frames.push(React.createRef());\n          const task = window.data.tasks[x];\n          if (this.props.id === 'river') {\n            // render state correctly in original lists\n            return (\n              <List key={x} id={x} title={task.title}\n                subtasks={task.subtasks} parent={this}\n                deadlines={this.props.deadlines[task.title]}\n                startdates={this.props.startdates[task.title]}\n                repeats={this.state.repeats[util.dateFormat(task.title)\n                  .slice(0, 3)]}\n                ref={this.frames[this.frames.length - 1]} />\n            )\n          } else {\n            return (\n              <List key={x} id={x} title={task.title}\n                subtasks={task.subtasks} parent={this}\n                ref={this.frames[this.frames.length - 1]} />\n            )\n          }\n        })}\n        <button className='changeButton'\n          onClick={() => this.changeIndex(this.state.width)}>&gt;</button>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}