{"ast":null,"code":"import * as display from '../display/display';\nimport * as util from '../util/util';\nexport function deleteTask() {\n  if (selected && selected instanceof Task) {\n    window.undoData = localStorage.getItem('data');\n    selected.deleteThis();\n  }\n}\nexport function newTask(type) {\n  // create new task after selected\n  if (!selected || window.preventReturn) return;\n  let el;\n\n  if (type == 'task' || !selected.state.parent) {\n    el = selected;\n  } else if (type == 'list' || selected.state.parent) {\n    el = selected.state.parent;\n  }\n\n  const today = new Date();\n  const now = today.getTime();\n  const newTask = String(now);\n  window.data.tasks[newTask] = {\n    info: {\n      complete: '',\n      startDate: '',\n      endDate: ''\n    },\n    title: '',\n    subtasks: []\n  };\n  window.copiedTask = newTask;\n  pasteTask(type);\n}\nexport function selectTask(el, force) {\n  // make this task selected\n  if (window.preventSelect) return;\n\n  if (el instanceof TaskList) {\n    return;\n  }\n\n  window.preventSelect = true;\n  setTimeout(function () {\n    window.preventSelect = false;\n  }, 100);\n\n  if (selected) {\n    save(selected, 'task');\n  }\n\n  if (selected == el && !force) {\n    return;\n  }\n\n  if (selected instanceof Task && selected != el) {\n    selected.displayOptions({\n      target: undefined\n    }, 'hide');\n  }\n\n  selected = el;\n\n  if (el instanceof Task) {\n    el.editBar.current.focus();\n  } else if (el instanceof List) {\n    el.listInput.current.focus();\n  }\n}\nexport function save(task, saveType) {\n  // save the new window.data\n  if (saveType === 'list') {\n    var saveObject = task.props.parent;\n  } else {\n    var saveObject = task;\n  }\n\n  if (saveObject.subtasksCurrent) var subtasks = saveObject.subtasksCurrent;else var subtasks = saveObject.state.subtasks;\n  window.data.tasks[util.stripR(saveObject.props.id)] = {\n    title: saveObject.state.title,\n    info: saveObject.state.info,\n    subtasks: subtasks\n  };\n  localStorage.setItem('data', JSON.stringify(window.data));\n}\nexport function undo() {\n  localStorage.setItem('data', window.undoData);\n  setTimeout(() => window.location.reload(), 500);\n}\nexport function saveSetting(setting, value) {\n  window.data.settings[setting] = value;\n  localStorage.setItem('data', JSON.stringify(window.data));\n}\nexport function cutTask() {\n  if (!selected || selected instanceof List) return;\n  copyTask();\n  selected.deleteThis(false);\n  window.undoData = localStorage.getItem('data');\n}\nexport function copyTask(mirror) {\n  if (!selected || selected instanceof List) return;\n  save(selected);\n\n  if (mirror) {\n    window.copiedTask = selected.props.id;\n  } else {\n    // only copy window.data\n    const today = new Date();\n    const now = today.getTime();\n    const newTask = String(now);\n    window.data.tasks[newTask] = { ...window.data.tasks[util.stripR(selected.props.id)]\n    };\n    window.copiedTask = newTask;\n  }\n}\nexport function pasteTask(type) {\n  console.log(selected);\n  if (!selected || !window.copiedTask) return;\n  window.undoData = localStorage.getItem('data');\n\n  if (selected instanceof List || type === 'task') {\n    const subtasks = selected.state.subtasks;\n    subtasks.splice(0, 0, window.copiedTask);\n    selected.setState({\n      subtasks: subtasks\n    });\n    save(selected, 'task');\n  } else if (selected instanceof Task || type === 'list') {\n    const subtasks = selected.state.parent.state.subtasks;\n    const insertIndex = subtasks.findIndex(x => x == selected.props.id) + 1;\n    subtasks.splice(insertIndex, 0, window.copiedTask);\n    selected.state.parent.setState({\n      subtasks: subtasks\n    });\n    save(selected, 'list');\n  }\n}\nexport function indentTask(unindent) {\n  // umm fix sometime\n  if (!selected) return;\n  const lastSelected = selected;\n  save(selected);\n  const subtasks = selected.props.parent.taskList.current.subtaskObjects;\n  const here = subtasks.findIndex(x => util.stripR(x.current.props.id) === util.stripR(selected.props.id));\n  console.log(subtasks, here);\n\n  if (unindent != true) {\n    if (here === 0) return;\n    const taskAbove = subtasks[here - 1].current;\n    const theseSubtasks = util.getSubtasks(taskAbove);\n    theseSubtasks.push(selected.props.id);\n    const previousSubtasks = util.getSubtasks(selected.props.parent);\n    previousSubtasks.splice(here, 1);\n    console.log(previousSubtasks.map(x => window.data.tasks[util.stripR(x)].title));\n    taskAbove.setState({\n      subtasks: theseSubtasks\n    });\n    console.log(window.data.tasks[util.stripR(selected.props.id)]);\n    lastSelected.props.parent.setState({\n      subtasks: previousSubtasks\n    });\n    console.log(window.data.tasks[util.stripR(selected.props.id)]);\n    save(taskAbove);\n    console.log(window.data.tasks[util.stripR(selected.props.id)]);\n    save(lastSelected.props.parent);\n    console.log(window.data.tasks[util.stripR(selected.props.id)]);\n  } else {\n    if (selected.props.parent.props.parent instanceof Frame) return;\n    const subtasks = selected.props.parent.props.parent.taskList.current.subtaskObjects;\n    const here = subtasks.findIndex(x => x.current.props.id === selected.props.parent.props.id);\n    const theseSubtasks = selected.props.parent.props.parent.state.subtasks;\n    theseSubtasks.splice(here + 1, 0, selected.props.id);\n    console.log(theseSubtasks);\n    selected.props.parent.props.parent.setState({\n      subtasks: theseSubtasks\n    });\n    save(selected.props.parent.props.parent);\n    const parentSubtasks = util.getSubtasks(lastSelected.props.parent);\n    parentSubtasks.splice(parentSubtasks.findIndex(x => x === lastSelected.props.id), 1);\n    lastSelected.props.parent.setState({\n      subtasks: parentSubtasks\n    });\n    save(lastSelected.props.parent);\n  }\n}\nexport function moveTask(direction) {\n  if (!selected) return;\n\n  if (selected.props.parent.subtasksCurrent) {\n    var subtasks = selected.props.parent.subtasksCurrent.concat();\n  } else {\n    var subtasks = selected.props.parent.state.subtasks;\n  }\n\n  let selectedPlace = subtasks.findIndex(x => x === selected.props.id);\n  const length = subtasks.length;\n  if (selectedPlace == 0 && direction == -1) return;else if (selectedPlace == subtasks.length && direction == 1) return;\n\n  if (direction == -1) {\n    var subtasksChopped = subtasks.slice(0, selectedPlace).reverse();\n  } else {\n    var subtasksChopped = subtasks.slice(selectedPlace + 1);\n  }\n\n  if (window.data.settings.hideComplete == 'hideComplete') {\n    var insertPlace = (subtasksChopped.findIndex(x => window.data.tasks[util.stripR(x)].info.complete != 'complete') + 1) * direction;\n  } else {\n    var insertPlace = 1 * direction;\n  }\n\n  const spliceTask = subtasks.splice(selectedPlace, 1)[0];\n  subtasks.splice(selectedPlace + insertPlace, 0, spliceTask);\n  selected.props.parent.setState({\n    subtasks: subtasks\n  });\n  save(selected.props.parent, 'task');\n}\nexport function listEdit(type) {\n  if (!selected) {\n    alert('select a list');\n    return;\n  }\n\n  if (type === 'migrate' && util.getFrame(selected).props.id === 'bank') {\n    alert('select a date');\n    return;\n  }\n\n  var incompleteTasks = [];\n  var subtasksCurrent = util.getList(selected).subtasksCurrent;\n\n  function addIncomplete(task) {\n    for (let x of task.taskList.current.subtaskObjects) {\n      addIncomplete(x.current);\n\n      if (x.current.state.info.complete !== 'complete') {\n        if (type === 'clear') {\n          x.current.toggleComplete();\n          x.current.displayOptions({\n            target: undefined\n          }, 'hide');\n          save(x.current);\n        } else if (type === 'migrate' && x.current.props.id.charAt(0) != 'R') {\n          incompleteTasks.push(x.current.props.id);\n          subtasksCurrent.splice(subtasksCurrent.findIndex(y => y === x.current.props.id), 1);\n        }\n      }\n    }\n  }\n\n  addIncomplete(util.getList(selected));\n\n  if (type === 'migrate') {\n    const tomorrow = new Date(util.getList(selected).state.title);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    util.getList(selected).setState({\n      subtasks: subtasksCurrent\n    });\n    save(util.getList(selected));\n    display.searchDate(tomorrow.toDateString());\n    setTimeout(() => {\n      selected.setState({\n        subtasks: selected.subtasksCurrent.concat(incompleteTasks)\n      });\n      save(selected);\n    }, 500);\n  }\n}","map":{"version":3,"sources":["/Users/frederic/Documents/big-projects/2021-11-01_riverbank-2/riverbank-2/src/services/edit/edit.js"],"names":["display","util","deleteTask","selected","Task","window","undoData","localStorage","getItem","deleteThis","newTask","type","preventReturn","el","state","parent","today","Date","now","getTime","String","data","tasks","info","complete","startDate","endDate","title","subtasks","copiedTask","pasteTask","selectTask","force","preventSelect","TaskList","setTimeout","save","displayOptions","target","undefined","editBar","current","focus","List","listInput","task","saveType","saveObject","props","subtasksCurrent","stripR","id","setItem","JSON","stringify","undo","location","reload","saveSetting","setting","value","settings","cutTask","copyTask","mirror","console","log","splice","setState","insertIndex","findIndex","x","indentTask","unindent","lastSelected","taskList","subtaskObjects","here","taskAbove","theseSubtasks","getSubtasks","push","previousSubtasks","map","Frame","parentSubtasks","moveTask","direction","concat","selectedPlace","length","subtasksChopped","slice","reverse","hideComplete","insertPlace","spliceTask","listEdit","alert","getFrame","incompleteTasks","getList","addIncomplete","toggleComplete","charAt","y","tomorrow","setDate","getDate","searchDate","toDateString"],"mappings":"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","sourcesContent":["import * as display from '../display/display';\nimport * as util from '../util/util';\n\nexport function deleteTask() {\n  if (selected && selected instanceof Task) {\n    window.undoData = localStorage.getItem('data');\n    selected.deleteThis();\n  }\n}\n\nexport function newTask(type) {\n  // create new task after selected\n  if (!selected || window.preventReturn) return;\n  let el;\n  if (type == 'task' || !selected.state.parent) {\n    el = selected;\n  } else if (type == 'list' || selected.state.parent) {\n    el = selected.state.parent;\n  }\n  const today = new Date();\n  const now = today.getTime();\n  const newTask = String(now);\n  window.data.tasks[newTask] = {\n    info: { complete: '', startDate: '', endDate: '' },\n    title: '',\n    subtasks: [],\n  };\n  window.copiedTask = newTask;\n  pasteTask(type);\n}\n\nexport function selectTask(el, force) {\n  // make this task selected\n  if (window.preventSelect) return\n  if (el instanceof TaskList) {\n    return\n  }\n  window.preventSelect = true;\n  setTimeout(function () { window.preventSelect = false }, 100);\n  if (selected) {\n    save(selected, 'task');\n  }\n  if (selected == el && !force) {\n    return;\n  }\n  if (selected instanceof Task && selected != el) {\n    selected.displayOptions({ target: undefined }, 'hide');\n  }\n  selected = el;\n  if (el instanceof Task) {\n    el.editBar.current.focus();\n  } else if (el instanceof List) {\n    el.listInput.current.focus();\n  }\n}\n\nexport function save(task, saveType) {\n  // save the new window.data\n  if (saveType === 'list') {\n    var saveObject = task.props.parent;\n  } else {\n    var saveObject = task;\n  }\n  if (saveObject.subtasksCurrent) var subtasks = saveObject.subtasksCurrent;\n  else var subtasks = saveObject.state.subtasks;\n  window.data.tasks[util.stripR(saveObject.props.id)] = {\n    title: saveObject.state.title,\n    info: saveObject.state.info, subtasks: subtasks\n  };\n  localStorage.setItem('data', JSON.stringify(window.data));\n}\n\nexport function undo() {\n  localStorage.setItem('data', window.undoData);\n  setTimeout(() => window.location.reload(), 500);\n}\n\nexport function saveSetting(setting, value) {\n  window.data.settings[setting] = value;\n  localStorage.setItem('data', JSON.stringify(window.data));\n}\n\nexport function cutTask() {\n  if (!selected || selected instanceof List) return;\n  copyTask();\n  selected.deleteThis(false);\n  window.undoData = localStorage.getItem('data');\n}\n\nexport function copyTask(mirror) {\n  if (!selected || selected instanceof List) return;\n  save(selected);\n  if (mirror) {\n    window.copiedTask = selected.props.id;\n  } else {\n    // only copy window.data\n    const today = new Date();\n    const now = today.getTime();\n    const newTask = String(now);\n    window.data.tasks[newTask] = { ...window.data.tasks[util.stripR(selected.props.id)] };\n    window.copiedTask = newTask;\n  }\n}\n\nexport function pasteTask(type) {\n  console.log(selected);\n  if (!selected || !window.copiedTask) return;\n  window.undoData = localStorage.getItem('data');\n  if (selected instanceof List || type === 'task') {\n    const subtasks = selected.state.subtasks;\n    subtasks.splice(0, 0, window.copiedTask);\n    selected.setState({ subtasks: subtasks });\n    save(selected, 'task');\n  } else if (selected instanceof Task || type === 'list') {\n    const subtasks = selected.state.parent.state.subtasks;\n    const insertIndex = subtasks.findIndex(x => x == selected.props.id) + 1;\n    subtasks.splice(insertIndex, 0, window.copiedTask);\n    selected.state.parent.setState({ subtasks: subtasks });\n    save(selected, 'list');\n  }\n}\n\nexport function indentTask(unindent) {\n  // umm fix sometime\n  if (!selected) return;\n  const lastSelected = selected;\n  save(selected);\n  const subtasks = selected.props.parent.taskList.current.subtaskObjects;\n  const here = subtasks\n    .findIndex(x => \n    util.stripR(x.current.props.id) === util.stripR(selected.props.id));\n  console.log(subtasks, here);\n  if (unindent != true) {\n    if (here === 0) return;\n    const taskAbove = subtasks[here - 1].current;\n    const theseSubtasks = util.getSubtasks(taskAbove);\n    theseSubtasks.push(selected.props.id);\n    const previousSubtasks = util.getSubtasks(selected.props.parent);\n    previousSubtasks.splice(here, 1);\n    console.log(previousSubtasks.map(x => window.data.tasks[util.stripR(x)].title));\n    taskAbove.setState( { subtasks: theseSubtasks });\n    console.log(window.data.tasks[util.stripR(selected.props.id)]);\n    lastSelected.props.parent.setState({ subtasks: previousSubtasks });\n    console.log(window.data.tasks[util.stripR(selected.props.id)]);\n    save(taskAbove);\n    console.log(window.data.tasks[util.stripR(selected.props.id)]);\n    save(lastSelected.props.parent);\n    console.log(window.data.tasks[util.stripR(selected.props.id)]);\n  } else {\n    if (selected.props.parent.props.parent instanceof Frame) return;\n    const subtasks = selected.props.parent.props.parent\n      .taskList.current.subtaskObjects;\n    const here = subtasks.findIndex(\n      x => x.current.props.id === selected.props.parent.props.id);\n    const theseSubtasks = selected.props.parent.props.parent.state.subtasks;\n    theseSubtasks.splice(here + 1, 0, selected.props.id);\n    console.log(theseSubtasks);\n    selected.props.parent.props.parent.setState({ subtasks: theseSubtasks });\n    save(selected.props.parent.props.parent);\n    const parentSubtasks = util.getSubtasks(lastSelected.props.parent);\n    parentSubtasks.splice(parentSubtasks.findIndex(x => \n      x === lastSelected.props.id), 1);\n    lastSelected.props.parent.setState({ subtasks: parentSubtasks });\n    save(lastSelected.props.parent);\n  }\n}\n\nexport function moveTask(direction) {\n  if (!selected) return;\n  if (selected.props.parent.subtasksCurrent) {\n    var subtasks = selected.props.parent.subtasksCurrent.concat();\n  } else {\n    var subtasks = selected.props.parent.state.subtasks;\n  }\n  let selectedPlace =\n    subtasks.findIndex(x => x === selected.props.id);\n  const length = subtasks.length;\n  if (selectedPlace == 0 && direction == -1) return;\n  else if (selectedPlace == subtasks.length\n    && direction == 1) return;\n  if (direction == -1) {\n    var subtasksChopped = subtasks.slice(0, selectedPlace).reverse();\n  } else {\n    var subtasksChopped = subtasks.slice(selectedPlace + 1);\n  }\n  if (window.data.settings.hideComplete == 'hideComplete') {\n    var insertPlace = (subtasksChopped.findIndex(x =>\n      window.data.tasks[util.stripR(x)].info.complete != 'complete') + 1) * direction;\n  } else {\n    var insertPlace = 1 * direction;\n  }\n  const spliceTask = subtasks.splice(selectedPlace, 1)[0];\n  subtasks.splice(selectedPlace + insertPlace, 0, spliceTask);\n  selected.props.parent.setState({ subtasks: subtasks });\n  save(selected.props.parent, 'task');\n}\n\nexport function listEdit(type) {\n  if (!selected) {\n    alert('select a list');\n    return;\n  }\n  if (type === 'migrate' && util.getFrame(selected).props.id === 'bank') {\n    alert('select a date');\n    return;\n  }\n  var incompleteTasks = [];\n  var subtasksCurrent = util.getList(selected).subtasksCurrent;\n  function addIncomplete(task) {\n    for (let x of task.taskList.current.subtaskObjects) {\n      addIncomplete(x.current);\n      if (x.current.state.info.complete !== 'complete') {\n        if (type === 'clear') {\n          x.current.toggleComplete();\n          x.current.displayOptions({target: undefined}, 'hide');\n          save(x.current);\n        } else if (type === 'migrate' && \n          x.current.props.id.charAt(0) != 'R') {\n          incompleteTasks.push(x.current.props.id);\n          subtasksCurrent.splice(subtasksCurrent\n            .findIndex(y => y === x.current.props.id), 1);\n        }\n      }\n    }\n  }\n  addIncomplete(util.getList(selected));\n  if (type === 'migrate') {\n    const tomorrow = new Date(util.getList(selected).state.title);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    util.getList(selected).setState({\n      subtasks: subtasksCurrent\n    });\n    save(util.getList(selected));\n    display.searchDate(tomorrow.toDateString());\n    setTimeout(() => {\n      selected.setState(\n        { subtasks: selected.subtasksCurrent.concat(incompleteTasks) });\n      save(selected);\n    }, 500);\n  }\n}"]},"metadata":{},"sourceType":"module"}